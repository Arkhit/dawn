<!-- updated blocks 
monogram.liquid
cart.liquid
checkout.liquid
product-page-listing-subfile

-->
<!-- things to do 
  
6.  if they come via sets.. could be a problem...
when we choose to modify all items individually, need to copy over font and color to start.
need to do 3 or more items..

NEED TO ADD UPPERCASE VS LOWERCASE>  FOR NOW< JUST doing the key by lowercase and converting.
if you add no monograms to cart.. i have just nulled out the hrefs on the atc buttons.  the popup still says "added to cart".
Error message currently sucks

what to do if monogram handle is blank.
Error message sucks
-->

{{ 'owl.carousel.min.css' | asset_url | stylesheet_tag }}
{{ 'owl.theme.default.min.css' | asset_url | stylesheet_tag }}
{{ 'owl.carousel.min.js' | asset_url | script_tag }}  

<style>
  .full-page-title{
     font-size: 20pt;
    line-height: 1.2;
    text-transform: uppercase;
    width: 100%;
    padding: 5px;

    
  }
  .full-page-subtitle{
         font-size: 12pt;
    line-height: 1;
    width: 100%;
    padding: 8px 5px;

    
  }
  .mono-holder{display:block;}
  .monoProd-title {
    font-size: 12pt;
    line-height: 1;
    text-transform: uppercase; margin-bottom:5px;}
  .monoProd-note {display:none; margin: 5px auto 10px auto; text-decoration:underline;}
  .monoProd-image {width:100px; float:left;}
  .monoImgSmall {width:100%;}
  .monoMulti {display:none;}
  .monoBottom {width:100%; display:inline-block;}
  .monoSelectors {display:inline-block; width:calc(100% - 430px);float:left; margin-right:30px;}
  .monoBigImg-holder {width:400px; float:left; position:relative;;}
  .mono-font-thumb {border: 1px solid #808080;}
  .dummyfontimg {border: 1px solid #808080;}
  .monoTitle {    
    font-size: 12pt;
    line-height: 1.2;
    text-transform: uppercase;
    width: calc(100% - 10px);
    padding: 5px;
    background-color: #666666;
    color: white;}
  .monoSlider {width:90%; margin:10px auto;}
  .mono-font {display:none;}
  .mono-color {display:none;}
  .mono-font-slider-entry {}
  .mono-font-data-holder {display:inline-block;}
  .mono-slider-div { border: 1px solid white;cursor: pointer; padding:2px; margin-right:2px; }
  .mono-slider-div:hover {border: 1px solid #808080;}
  .sliderSelected {border: 1px solid #808080;}
  .initials { 
        margin: 20px 10px;
    line-height: 1;
    padding: 10px;
    border: 1px solid #808080;
    width: 50px;
    border-radius: 0;
    
  }
  
  input.initials { 
      text-transform: uppercase;
  }
  ::-webkit-input-placeholder { /* WebKit browsers */
      text-transform: none;
  }
  :-moz-placeholder { /* Mozilla Firefox 4 to 18 */
      text-transform: none;
  }
  ::-moz-placeholder { /* Mozilla Firefox 19+ */
      text-transform: none;
  }
  :-ms-input-placeholder { /* Internet Explorer 10+ */
      text-transform: none;
  }
  ::placeholder { /* Recent browsers */
      text-transform: none;
  }
  
  
  
  .monoDummy
  {
    margin: 0px 0px;
    line-height: 1;
    padding: 10px;
    width:calc(100% - 40px);
    display:inline-block;
    min-height:40px;
  }
  .monoDummyLeft
  {
   width:100px;
    float:left;
    margin-right:10px;
    text-align:center;

  }
  .dummyfontimg {width:100%;}
  .dummycolorimg {width:100%;}
  .monoDummyRight{
    width:calc(100% - 110px);
    float:left;
    margin-top:10px;
  }
  .mono-font-descrip-text { padding:15px;}
  .monoIMGAYS-holder {display:inline-block; width:100%;    margin-top: 10px;}
  .AYSRadio-holder {margin-bottom:10px;}
  /*.AYSYES {border: 1px solid #ccc;  background: transparent;}
  .AYSNO {border: 1px solid #ccc;  background: transparent;}*/
  
  
  
  .AYcontainer {
    padding-top: 2px;
    display: block;
    position: relative;
    padding-left: 35px;
    margin-bottom: 12px;
    cursor: pointer;
    line-height:1.2;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/* Hide the browser's default radio button */
.AYcontainer input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
}

/* Create a custom radio button */
.AYcheckmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;

    border-radius: 50%;
  border: 2px solid #ccc;
    background-color: white;
}

/* On mouse-over, add a grey background color 
.AYcontainer:hover input ~ .AYcheckmark {
    background-color: #ccc;
}*/

/* When the radio button is checked, add a dark grey background */
.AYcontainer input:checked ~ .AYcheckmark {
    background-color: #808080;
}

/* Create the indicator (the dot/circle - hidden when not checked) */
.AYcheckmark:after {
    content: "";
    position: absolute;
    display: none;
}

/* Show the indicator (dot/circle) when checked */
.AYcontainer input:checked ~ .AYcheckmark:after {
    display: block;
}

/* Style the indicator (dot/circle) */
.AYcontainer .AYcheckmark:after {
  top: 9px;
  left: 9px;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: white;
}
  
  
  
  
  
  
  .mono-button {display:none;}
  .monoAYSUREHolder {width:calc(100% - 120px); float:left; margin-left:20px;}
  .mono-add-all-items-decription {
    width: 100%;
    margin-bottom: 15px;
  }

/* Customize the label (the container) */
.AllItemscontainer {
  display: block;
  position: relative;

  margin-bottom: 12px;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  padding-top: 3px;
  
  
  padding-left: 38px;


}

/* Hide the browser's default checkbox */
.AllItemscontainer input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Create a custom checkbox */
.AllItemscheckmark {
  position: absolute;
  top: 0;
  left: 0;
  height: 25px;
  width: 25px;
 background-color: white;
    border: 2px solid #ccc;
}

/* On mouse-over, add a grey background color
.AllItemscontainer:hover input ~ .AllItemscheckmark {
  background-color: #ccc;
} */

/* When the checkbox is checked, add a grey background */
.AllItemscontainer input:checked ~ .AllItemscheckmark {
  background-color: #808080;
}

/* Create the checkmark/indicator (hidden when not checked) */
.AllItemscheckmark:after {
  content: "";
  position: absolute;
  display: none;
}

/* Show the checkmark when checked */
.AllItemscontainer input:checked ~ .AllItemscheckmark:after {
  display: block;
}

/* Style the checkmark/indicator */
.AllItemscontainer .AllItemscheckmark:after {
  left: 9px;
  top: 5px;
  width: 5px;
  height: 10px;
  border: solid white;
  border-width: 0 3px 3px 0;
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}                    
  
  
  
  .addNewMono {width: calc(100% - 22px); padding:10px; border:1px solid #808080; margin-bottom:10px;}
  .CartMono {width: calc(100% - 22px); padding:10px; border:1px solid #808080; margin-bottom:10px}
  .owl-prev {
       position: absolute;
    left: -28px;
    top: 24%;
}

.owl-next {
  position: absolute;
    left: 100%;
    top: 24%;
}
  .owl-nav {
    height:0;    font-size: 30px;}

  input[type=checkbox] {
  transform: scale(2);
    -ms-transform: scale(2); /* IE 9 */
    -webkit-transform: scale(2); /* Chrome, Safari, Opera */
 
}
  input[type=radio] {
  -ms-transform: scale(2); /* IE 9 */
    -webkit-transform: scale(2); /* Chrome, Safari, Opera */
    transform: scale(2);
margin-bottom: 10px;
     
  }
  .monoBigOverlay-holder{
  z-index: 10;
    position: absolute;;
    top: 70%;
    width: 100%;
    text-align: center;
    margin:auto;
  }
  .monoBigOverlay-inner-holder{
    margin: 0 auto;
    display:inline-block;
  }
  .monoBigImg {width:100%; max-width:400px; margin:auto;}
  .monoletter {width:50px; float:left; height:50px;  background-repeat: no-repeat; background-image: url('');  display:none; position:relative;
  }
  
  .mono1 {
    background-position: -0px -0px;

  }
  .mono2 {
    background-position: -0px -0px;

  }
  .mono3 {
    background-position: -0px -0px;

  }
  .disclaimer {    text-align: center;
    font-size: 9pt;}
  .megaATC {
  font-size:12pt;
    padding-top: 18px;
    padding-bottom: 18px;
    margin: 0 auto;
    text-align:center;
  }
  .megaATCHolder {
   float:left;
   line-height:1.2;
    
  }
  .metaATCSpinner {float:left; width:50px;}
  
  .titleError {color:red;}
  @media (max-width:750px) {
  .monoBigImg-holder {width:100%;     margin-top: 20px;}
    .monoSelectors {width: calc(100% - 10px); margin: 10px 0 0 0;}
    .owl-prev {}
    .owl-next {}
    .mono-font-descrip-text { padding:0px;}
    .megaATCHolder {max-width:calc(100% - 50px); }
  }
  .all-items-checkbox {  border: 1px solid #ccc; border-radius: 0;  background: transparent; margin-left:10px;}
  
  
</style>


<script>

  function buildPRODUCTArray() {
    {% assign MonoDataProduct = all_products.monogram-product-image-array %}
    {% assign productDataArray = MonoDataProduct.description | split: "$$" %}
    {% assign productIMGArray = MonoDataProduct.images %}
    var productarray = {};

    //structure is the following.  Key monogram image offset, multiplier, note, img url
    {% for monoPROD in productDataArray %}
        {% assign temparray = monoPROD | split: "::" %}
        var temparray = ["{{temparray[1] | strip_html | strip  }}","{{temparray[2] | strip_html | strip  }}","{{temparray[3] | strip_html | strip  }}","{{temparray[4] | strip_html | strip  }}"];



        {% assign tempskus = temparray[5] | strip_html | strip %}
        {% assign tempskusarray = tempskus | split: "," %}


        var tempskusarray = [];

        // if there are skus in the file, then make an entry for each sku.
        // otherwise, make one entry

        {% if tempskusarray.size > 0 %}

          {% for sku in tempskusarray %}
            tempskusarray.push("{{tempskusarray[forloop.index0]}}");
            var temphandle = "{{temparray[0] | strip_html | replace: '-', '' | strip | handle }}" + "::{{tempskusarray[forloop.index0] | upcase }}"
            var temphandle = $.trim(temphandle);
            productarray[temphandle] = temparray;
          {% endfor %}
          
        {% else %}
          var temphandle = "{{temparray[0] | strip_html | replace: '-', '' | strip | handle }}";
          var temphandle = $.trim(temphandle);
          productarray[temphandle] = temparray;
        {% endif %}
     
    {% endfor %}
    {% for monoIMG in productIMGArray %}

      //need to check for skus in the alt tag.  If they are there, then do multiple check and push.
      {% assign alttagarray = monoIMG.alt | split: "::" %}
      {% assign alttag = alttagarray[0] | strip_html | replace: '-', '' | strip | handle %}
      {% assign alttagskus = alttagarray[1] %}

      {% if alttagskus.size >0 %}

        // array:  {{alttagarray}}
        // alttag:  {{alttag}}
        // skus:  {{alttagskus}}

      {% endif %}

      {% if alttagskus.size > 0 %}
        {% assign alttagskusarray = alttagskus | split: ","%}

        {% for sku in alttagskusarray %}
          var newhandle = "{{alttag}}" + "::{{sku | upcase}}"
          if (productarray[newhandle] != null) {
            var temparray = productarray[newhandle];
            temparray.push("{{ monoIMG | product_img_url: '600x600', crop: 'bottom' }}");
            productarray[newhandle] = temparray;
          }
        {% endfor %}
      {% else %}
        var newhandle = "{{ alttag | replace: '-', ''}}";
        if (productarray[newhandle] != null) {
          var temparray = productarray[newhandle];
          temparray.push("{{ monoIMG | product_img_url: '600x600', crop: 'bottom' }}");
          productarray[newhandle] = temparray;
 
        }
      {% endif %}


     
    {% endfor %}
   

    return productarray;
    
  }
  
  
  function getUrlVars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
      vars[key] = value;
    });
    return vars;
  }
  
  function getUrlParam(parameter, defaultvalue){
    var urlparameter = defaultvalue;
    if(window.location.href.indexOf(parameter) > -1){
      urlparameter = getUrlVars()[parameter];
    }
    return urlparameter;
  }
  
  function hideAllEdits(entrytype){
      $( entrytype+":not(:first)" ).find('.monoAYSUREHolder').hide();
    $( ".addNewMono:not(:first)" ).find('.monoDummyHolder').show();
      $( ".addNewMono:not(:first)" ).find('.monoFontHolder').hide();
        $( ".addNewMono:not(:first)" ).find('.monoTextHolder').hide();
        $( ".addNewMono:not(:first)" ).find('.monoColorHolder').hide();
      $( ".addNewMono:not(:first)" ).find('.monoBigImg-holder').hide();
    
    
    return;
  }
  function showAllEdits(entrytype){
    $( entrytype+":not(:first)" ).find('.monoAYSUREHolder').show();
    $( ".addNewMono:not(:first)" ).find('.monoDummyHolder').hide();
      $( ".addNewMono:not(:first)" ).find('.monoFontHolder').show();
        $( ".addNewMono:not(:first)" ).find('.monoTextHolder').show();
        $( ".addNewMono:not(:first)" ).find('.monoColorHolder').show();
    $( ".addNewMono:not(:first)" ).find('.monoBigImg-holder').show();
    return;
    
  }
       
  function toTitleCase(str) {
      return str.replace(/\w\S*/g, function(txt){
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
      });
  }
       
  function copytoDummies(){
    var selectedfontslider = $( ".addNewMono:first" ).find(".monoFontHolder").find(".sliderSelected");
    if (selectedfontslider.length != 0) {
      var selectedfontsrc = selectedfontslider.find('img').attr('src');
      $( ".addNewMono" ).find(".monoFontDummyValueIMG").html("<img class='dummyfontimg' src="+selectedfontsrc+" />");
      $( ".addNewMono" ).find(".monoFontDummyValueIMG").show();
    }
    var selectedcolorslider = $( ".addNewMono:first" ).find(".monoColorHolder").find(".sliderSelected");
    if (selectedcolorslider.length != 0) {
      var selectedcolorsrc = selectedcolorslider.find('img').attr('src');
      $( ".addNewMono" ).find(".monoColorDummyValueIMG").html("<img class='dummycolorimg' src="+selectedcolorsrc+" />");
      $( ".addNewMono" ).find(".monoColorDummyValueIMG").show();
    }
    var tempColor = toTitleCase($( ".addNewMono:first" ).find(".mono-color").val());
    var tempFont = toTitleCase($( ".addNewMono:first" ).find(".mono-font").val());

      $( ".addNewMono" ).find(".monoFontDummyValue").html(tempFont);
      $( ".addNewMono" ).find(".monoColorDummyValue").html(tempColor);
      $( ".addNewMono" ).find(".monoFontTextValue").html($( ".initials:first" ).val());

    return;
    
  }

  function updateImgMonogramAttr(monoSelector){
    /*get passed a .monoSelectors
    find the selected font and color.
    get the correct background image
  change the background images on 1,2,and 3
    update the background adjustment amount for the letter array
    This is always paired with updateImgMonogramText.  We do the final scaling at the end fo that function
    SHould spend some time and do the scaling inline.. but too lazy right now
    */
    var selected = monoSelector.find('.sliderSelected');
    if (selected.length == 2) {

      var fontselected = selected.first().children('a').attr('value');
      var colorselected = selected.last().children('a').attr('value').split(" ").join("");

      var selectedIMGsrc = monoSelector.find('.'+fontselected).find('.mono-font-sprite1').eq( 1 ).attr('src');
          
        // if the font is a 3 way font, now do the assignment by monogram

      if (monoSelector.find('.'+fontselected).find('.monoleft').length > 0){
         //if 3 way, assign each monogram background image.
       
        if (colorselected.length > 0 ) {
          //assign them.
            var leftcolorspecific = monoSelector.find('.'+fontselected).find('.mono'+colorselected.toLowerCase()+'.monoleft');
          var middlecolorspecific = monoSelector.find('.'+fontselected).find('.mono'+colorselected.toLowerCase()+'.monomiddle');
          var rightcolorspecific = monoSelector.find('.'+fontselected).find('.mono'+colorselected.toLowerCase()+'.monoright');
          
        } else {
            var leftcolorspecific = monoSelector.find('.'+fontselected).find('.monoblack.monoleft');
          var middlecolorspecific = monoSelector.find('.'+fontselected).find('.monoblack.monomiddle');
          var rightcolorspecific = monoSelector.find('.'+fontselected).find('.monoblack.monoright');
        }
        
        monoSelector.siblings('.monoBigImg-holder').find('.monoletter.mono0').css('background-image','url('+leftcolorspecific.attr('src')+')');
        monoSelector.siblings('.monoBigImg-holder').find('.monoletter.mono1').css('background-image','url('+middlecolorspecific.attr('src')+')');   
        monoSelector.siblings('.monoBigImg-holder').find('.monoletter.mono2').css('background-image','url('+rightcolorspecific.attr('src')+')'); 
        
      } else {
        
        // if no 3way, assign colorimage.
        
        var colorspecific = monoSelector.find('.'+fontselected).find('.mono'+colorselected.toLowerCase());
        if (colorspecific.length > 0) {
          var selectedIMGsrc = colorspecific.attr('src');
        } else if (monoSelector.find('.'+fontselected).find('.monoblack').length > 0) {
          var selectedIMGsrc = monoSelector.find('.'+fontselected).find('.monoblack').attr('src');
        } else {
          
          var selectedIMGsrc = monoSelector.find('.'+fontselected).find('.mono-font-base').attr('src');
        }
        
      monoSelector.siblings('.monoBigImg-holder').find('.monoletter').css('background-image','url('+selectedIMGsrc+')');        
      }
       
        
      var letterwidth = parseInt(monoSelector.find('.'+fontselected).find('.mono-font-sprite1').eq( 1 ).attr('letterwidth'));
      var letterheight = parseInt(monoSelector.find('.'+fontselected).find('.mono-font-sprite1').eq( 1 ).attr('letterheight'));
      

      var bgImageWidth = letterwidth * 6;
      monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').attr('origbgimgwidth',bgImageWidth);
      monoSelector.siblings('.monoBigImg-holder').find('.monoletter.mono0').css('background-size',bgImageWidth);
      monoSelector.siblings('.monoBigImg-holder').find('.monoletter.mono1').css('background-size',bgImageWidth);
      monoSelector.siblings('.monoBigImg-holder').find('.monoletter.mono2').css('background-size',bgImageWidth);
      
      var oldoffset = monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').attr('origtop');
 
      
      if (isNaN(letterwidth) || isNaN(letterheight)){
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').css('top',oldoffset);
        monoSelector.siblings('.monoBigImg-holder').find('.monoletter').css('width',"50px");
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').attr('origLetterWidth','50');
    monoSelector.siblings('.monoBigImg-holder').find('.monoletter').css('height',"50px");
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').attr('origLetterHeight','50');
        var letterarray = buildLetterArray(50,50);
      } else {

      
        var offsetadj = (letterheight - 50)/2;
 
        var newoffset = 'calc('+oldoffset+' - '+offsetadj+'px)';
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').css('top',newoffset);
        monoSelector.siblings('.monoBigImg-holder').find('.monoletter').css('width',letterwidth+"px");
    monoSelector.siblings('.monoBigImg-holder').find('.monoletter').css('height',letterheight+"px");
        //set the default letter offsets for the selected font
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').attr('origLetterWidth',letterwidth);
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder').attr('origLetterHeight',letterheight);
      
        var letterarray = buildLetterArray(letterwidth,letterheight);
      }
    }
     
   
    
    return letterarray;
  }
       
function updateImgMonogramScale(scale, monoSelector){

   
  var OverlayHolder = monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-holder');
  var ProdScale = parseFloat(OverlayHolder.attr('ProdmonoScale'));
  
  OverlayHolder.attr('scale', scale);
  
  var finalScale = ProdScale*scale;
  
   var originalBGImgWidth = OverlayHolder.attr('origbgimgwidth');
   var newBGImgWidth = originalBGImgWidth*finalScale;
  
  var originalLetterWidth = OverlayHolder.attr('origLetterWidth');
  var originalLetterHeight = OverlayHolder.attr('origLetterHeight');
  
  var newLetterWidth = originalLetterWidth*finalScale;
  var newLetterHeight = originalLetterHeight*finalScale;

  
  
  
  
  // go to all the monoletters, 
  //update the width and height by the scale
  // add a background size to the scaled size
  //take the current background-positoin and scale it also.
  // so i need to save the original background position factor as well.  which is equalt o the wdith and height;

  
  //for each monoletter
  
  OverlayHolder.find('.monoletter').each(function( index ) {
    var origLetterx = $(this).attr('letterx');
    var origLettery = $(this).attr('lettery');
    var OverlayHolder = $(this).closest('.monoBigOverlay-holder');
    var scale = parseFloat(OverlayHolder.attr('scale'));
    var ProdScale = parseFloat(OverlayHolder.attr('ProdmonoScale'));
    var finalScale = ProdScale*scale;
  var newLetterx = parseFloat(origLetterx, 10)*finalScale;
    var newLettery = parseFloat(origLettery, 10)*finalScale;
    $(this).css('background-position',newLetterx+'px '+newLettery+'px');
    
  });
  
  
  if (newLetterWidth > 0){
    OverlayHolder.find('.monoletter').css('width',newLetterWidth+'px');
  }
  if (newLetterHeight > 0){
    OverlayHolder.find('.monoletter').css('height',newLetterHeight+'px');
  }
  if (newBGImgWidth > 0){
    OverlayHolder.find('.monoletter').css('background-size',newBGImgWidth+'px');
  } 

  var newLeftMono0 = parseFloat(OverlayHolder.find('.mono0').attr('defaultLeft'))*finalScale +'px';
  var newLeftMono1 = parseFloat(OverlayHolder.find('.mono1').attr('defaultLeft'))*finalScale +'px';
  var newLeftMono2 = parseFloat(OverlayHolder.find('.mono2').attr('defaultLeft'))*finalScale +'px';
  OverlayHolder.find('.mono0').css('left',newLeftMono0);
  OverlayHolder.find('.mono1').css('left',newLeftMono1);
  OverlayHolder.find('.mono2').css('left',newLeftMono2);
  
   var originalOffset = OverlayHolder.attr('origTop');

   var originalOffsetInt = parseInt(originalOffset.replace('%',''));

   var newoffsetPer = originalOffsetInt+"%";

  var monosizeoffset = (parseInt(OverlayHolder.find('.monoletter').first().css('height').replace('px','')) - 50)/2;
  
  
   var newoffset = 'calc('+newoffsetPer+' - '+monosizeoffset+'px)';
   OverlayHolder.css('top',newoffset);

   return; 
 }

function updateImgMonogramText(monoSelector,letterarray){

    var inputtedtext =  monoSelector.find('.initials').val().toLowerCase();
  var numletters = inputtedtext.length;
  var minlength = monoSelector.find('.initials').attr('minlength');
    // pull character adjusment data from the initials fields (updated when the font is updated via updateFontDescription).
    
    
  var charadjust = monoSelector.find('.initials').attr('charadjust');
  var charadjustint = parseInt(charadjust.replace('px',''));
    //var halfadjust = parseInt(charadjust.replace('px',''))/2+'px';
    //var negadjust = '-'+charadjust;
    //var neghalfadjust = '-'+halfadjust;
  
  var widchars = monoSelector.find('.initials').attr('widchars');
    var widcharsARRAY = monoSelector.find('.initials').attr('widchars').split(",");
  var narrowchars = monoSelector.find('.initials').attr('narrowchars');
    var narrowcharsARRAY = monoSelector.find('.initials').attr('narrowchars').split(",");

  var Mono0Pointer = monoSelector.siblings('.monoBigImg-holder').find('.mono0');
  var Mono1Pointer = monoSelector.siblings('.monoBigImg-holder').find('.mono1');
  var Mono2Pointer = monoSelector.siblings('.monoBigImg-holder').find('.mono2');
  
  //do some slight spaceing adjustments based on the number of letters
  switch(numletters) {
      case 2:
      
        var splitcounter = 0;
       var foundwidchar0 = false;
        var foundwidchar1 = false;
      var foundnarchar0 = false;
        var foundnarchar1 = false;
        
        for (i=0; i<widcharsARRAY.length; i++) {
      if (inputtedtext[0] == widcharsARRAY[i]){
              foundwidchar0 = true;
            }
            if (inputtedtext[1] == widcharsARRAY[i]){
              foundwidchar1 = true;
            } 
        }
        for (i=0; i<narrowcharsARRAY.length; i++) {
      if (inputtedtext[0] == narrowcharsARRAY[i]){
              foundnarchar0 = true;
            }
            if (inputtedtext[1] == narrowcharsARRAY[i]){
              foundnarchar1 = true;
            } 
        }

        //sum up the split
        if (foundwidchar0) {} else if (foundnarchar0) {splitcounter = splitcounter + 1;} else {splitcounter = splitcounter + 0.5;}
        if (foundwidchar1) {} else if (foundnarchar1) {splitcounter = splitcounter + 1;} else {splitcounter = splitcounter + 0.5;}
      
        // add the adjustments
        var finalsplitint = charadjustint * splitcounter;
        var finalsplitHALF = finalsplitint/2+'px';
        var finalsplitHALFneg = '-'+finalsplitint/2+'px';

      
        Mono0Pointer.css('left',finalsplitHALF);
        Mono1Pointer.css('left',finalsplitHALFneg);
      
        Mono0Pointer.attr('defaultLeft',finalsplitHALF);
        Mono1Pointer.attr('defaultLeft',finalsplitHALFneg);

      
         break;
      case 3:
      
        var splitcounter01 = 0;
        var splitcounter12 = 0;
        var foundwidchar0 = false;
        var foundwidchar1 = false;
        var foundwidchar2 = false;
        var foundnarchar0 = false;
        var foundnarchar1 = false;
        var foundnarchar2 = false;
      
        for (i=0; i<widcharsARRAY.length; i++) {
      if (inputtedtext[0] == widcharsARRAY[i]){
              foundwidchar0 = true;
            }
            if (inputtedtext[1] == widcharsARRAY[i]){
              foundwidchar1 = true;
            }
            if (inputtedtext[2] == widcharsARRAY[i]){
              foundwidchar2 = true;
            }
        }
        for (i=0; i<narrowcharsARRAY.length; i++) {
      if (inputtedtext[0] == narrowcharsARRAY[i]){
              foundnarchar0 = true;
            }
            if (inputtedtext[1] == narrowcharsARRAY[i]){
              foundnarchar1 = true;
            }
          if (inputtedtext[2] == narrowcharsARRAY[i]){
              foundnarchar2 = true;
            } 
        }
      
        //sum up the split
        if (foundwidchar0) {} else if (foundnarchar0) {splitcounter01 = splitcounter01 + 1;} else {splitcounter01 = splitcounter01 + 0.5;}
        if (foundwidchar1) {} else if (foundnarchar1) {splitcounter01 = splitcounter01 + 1;splitcounter12 = splitcounter12 + 1;} else {splitcounter01 = splitcounter01 + 0.5;splitcounter12 = splitcounter12 + 0.5;}
        if (foundwidchar2) {} else if (foundnarchar2) {splitcounter12 = splitcounter12 + 1;} else {splitcounter12 = splitcounter12 + 0.5;}
   
        // add the adjustments
        var finalsplitint01 = charadjustint * splitcounter01;
        var finalsplitint12 = charadjustint * splitcounter12;
        var finalsplit01 = finalsplitint01+'px';
        var finalsplit12 = '-'+finalsplitint12+'px';

        Mono0Pointer.css('left',finalsplit01);
       Mono1Pointer.css('left','0px');
      Mono2Pointer.css('left',finalsplit12);
      Mono0Pointer.attr('defaultLeft',finalsplit01);
       Mono1Pointer.attr('defaultLeft','0px');
      Mono2Pointer.attr('defaultLeft',finalsplit12);
      
        var paddingADJ = (finalsplitint01 - finalsplitint12)/2+'px';
        // need to set this up differnet for different monoselectors
        monoSelector.siblings('.monoBigImg-holder').find('.monoBigOverlay-inner-holder').css('padding-left',paddingADJ);
      
    
          break;
      default:
        Mono0Pointer.css('left','0px');
       Mono1Pointer.css('left','0px');
      Mono2Pointer.css('left','0px');
      
       Mono0Pointer.attr('defaultLeft','0px');
       Mono1Pointer.attr('defaultLeft','0px');
      Mono2Pointer.attr('defaultLeft','0px');
      
          break;
  }

  
  for (i = 0; i < 4; i++) { 
      if (i < numletters){
        var char = inputtedtext.charAt(i);

        if (letterarray != undefined){
        var letterx = letterarray[0][char];
        var lettery = letterarray[1][char];
        }
        if (letterx == undefined || lettery == undefined){
        } else {
        monoSelector.siblings('.monoBigImg-holder').find('.mono'+i).css('background-position', letterx+' '+lettery);
        monoSelector.siblings('.monoBigImg-holder').find('.mono'+i).attr('letterx',letterx);
        monoSelector.siblings('.monoBigImg-holder').find('.mono'+i).attr('lettery',lettery);  
        monoSelector.siblings('.monoBigImg-holder').find('.mono'+i).show();
        }
      } else {
        monoSelector.siblings('.monoBigImg-holder').find('.mono'+i).hide();
      }
      
  }
   
  //now scale it up that specifc selector.
  
    var curImgWidth = parseInt(monoSelector.siblings('.monoBigImg-holder').find('.monoBigImg:visible:first').css('width')); 
     updateImgMonogramScale(curImgWidth/400, monoSelector);

  
   return; 
  }
  
  function buildLetterArray(seperatorx,seperatory){
    /* based on the seperator, create and return a variable array for the letter adjustments */
    
    var sep = '0px';
    var sep1 = -seperatorx+'px';
    var sep2 = -seperatorx*2+'px';
    var sep3 = -seperatorx*3+'px';
    var sep4 = -seperatorx*4+'px';
    var sep5 = -seperatorx*5+'px';
    var xarray = {a:sep,b:sep1,c:sep2,d:sep3,e:sep4,f:sep5,g:sep,h:sep1,i:sep2,j:sep3,k:sep4,l:sep5,m:sep,n:sep1,o:sep2,p:sep3,q:sep4,r:sep5,s:sep,t:sep1,u:sep2,v:sep3,w:sep4,x:sep5,y:sep,z:sep1};
    var sep = '0px';
    var sep1 = -seperatory+'px';
    var sep2 = -seperatory*2+'px';
    var sep3 = -seperatory*3+'px';
    var sep4 = -seperatory*4+'px';
    var sep5 = -seperatory*5+'px';    
    var yarray = {a:sep,b:sep,c:sep,d:sep,e:sep,f:sep,g:sep1,h:sep1,i:sep1,j:sep1,k:sep1,l:sep1,m:sep2,n:sep2,o:sep2,p:sep2,q:sep2,r:sep2,s:sep3,t:sep3,u:sep3,v:sep3,w:sep3,x:sep3,y:sep4,z:sep4};

    var letterarray =[xarray,yarray]
    return letterarray;
  }
  
   function updateFontDescription(monoSlider, fontHandle){

  /* select the font description box */
  var FD = monoSlider.siblings('.monoFontDescription');
  /* hide all of them */
  FD.children().hide();
  /* show the correct one */
  var FDselect = FD.children().filter($('.'+fontHandle));
  FDselect.show();
  
  /* from the correct font description box, pull the charcount */
  var maxORGstring = FDselect.attr('charcount');
  var maxchararray = FDselect.attr('charcount').split(",");
  var charadjust= FDselect.attr('charadjust');
    var widchars = FDselect.attr('widchars');
     var narrowchars = FDselect.attr('narrowchars');
  
  /* Do charcount stuff */
  if (maxchararray.length > 1){
    var maxchar = maxchararray[maxchararray.length - 1];
        var minchar = maxchararray[0];
    var maxcharshort = maxchararray.slice(0,maxchararray.length-1);
    var maxcharstring = maxcharshort.join(', ') + ", or "+maxchar;
      // update instruction text
    monoSlider.closest('.monoSelectors').find('.text-input-label-num').html(maxcharstring);

      // update maxlength and minlength
      
    monoSlider.closest('.monoSelectors').find('.initials').attr('maxlength', maxchararray.length);
        monoSlider.closest('.monoSelectors').find('.initials').attr('minlength', minchar);
      
    var newvalue = monoSlider.closest('.monoSelectors').find('.initials').val().substring(0,maxchararray.length);

    monoSlider.closest('.monoSelectors').find('.initials').val(newvalue);
    copytoDummies();

  } else {

    monoSlider.closest('.monoSelectors').find('.text-input-label-num').html(maxORGstring);
    monoSlider.closest('.monoSelectors').find('.initials').attr('maxlength', maxchararray[0]);
        monoSlider.closest('.monoSelectors').find('.initials').attr('minlength', maxchararray[0]);
    var newvalue = monoSlider.closest('.monoSelectors').find('.initials').val().substring(0,maxchararray[0]);
    monoSlider.closest('.monoSelectors').find('.initials').val(newvalue);
    copytoDummies();
  }
     
    /* update the initials to include attributes of charadjust and widchars. */
     monoSlider.closest('.monoSelectors').find('.initials').attr('charadjust', charadjust);
     monoSlider.closest('.monoSelectors').find('.initials').attr('widchars', widchars);
     monoSlider.closest('.monoSelectors').find('.initials').attr('narrowchars', narrowchars);


 }

  function initParams(letterarray){
    var paramColor = getUrlParam('Color',"").replace(new RegExp('%20', 'g'), ' ');
    var paramFont = getUrlParam('Font',"").replace(new RegExp('%20', 'g'), ' ');
    var paramInitials = getUrlParam('Initials',"");
    var paramProduct = getUrlParam('Product',"").replace(new RegExp('%20', 'g'), ' ');
    var paramSKU = getUrlParam('_SKU',"");
    var paramQTY = getUrlParam('qty',"1");
    
  
    
    if (paramColor.length > 0) {

      $( ".addNewMono:first" ).find('.mono-color').val(paramColor);
      $( ".addNewMono:first" ).find(".monoColorHolder").find(".mono-font-slider-entry"+"[value='" + paramColor +"']").parent().addClass('sliderSelected');
      $( ".addNewMono:first" ).find('.monoColorHolder').find('.monoTitleSub').html(":&nbsp;&nbsp;&nbsp;"+paramColor);
      copytoDummies();
    }
    if (paramFont.length > 0) {

      $( ".addNewMono:first" ).find('.mono-font').val(paramFont);
      var slidertemp = $( ".addNewMono:first" ).find(".monoFontHolder").find(".mono-font-slider-entry"+"[name='" + paramFont +"']");
      slidertemp.parent().addClass('sliderSelected');  
      $( ".addNewMono:first" ).find('.monoFontHolder').find('.monoTitleSub').html(":&nbsp;&nbsp;&nbsp;"+paramFont);
  
      updateFontDescription($( ".addNewMono:first" ).find(".monoFontHolder").find(".monoSlider"), slidertemp.attr('value'));
    }
    if (paramInitials.length > 0) {

      $( ".addNewMono:first" ).find('.initials').val(paramInitials);

      copytoDummies();
    }
    
    if (paramColor.length > 0 && paramFont.length > 0 && paramInitials.length > 0) {
      /* add monogram overlay */
      var newletterarray = updateImgMonogramAttr($( ".addNewMono:first" ).find('.monoSelectors'));
      updateImgMonogramText($( ".addNewMono:first" ).find('.monoSelectors'),newletterarray);
      
      if (paramQTY > 1){
         $('.full-page-title').html("EDIT YOUR MONOGRAMS");
      } else {
         $('.full-page-title').html("EDIT YOUR MONOGRAM");
      }
      
     
      /* change title from "Add" to "EDIT" */
     
    }
    
    return newletterarray;
  }
    
  
  $(document).ready(function(){
    
    /* if no params, go to monogram page */
    if (window.location.href.indexOf("?") < 0){
      
      window.location.replace("https://www.craneandcanopy.com/pages/the-monogram-studio");
    }
    
    /* create params */
    
    var productHandle = getUrlParam('_handle','Empty');
    var ATCqty = getUrlParam('qty',1); 
    var variantID = parseInt(getUrlParam('_variantID',1)); 
    var SKU = getUrlParam('_SKU',1); 


    $(".MonoProductHandle").attr('value', productHandle );
    $(".MonoVariantID").attr('value', variantID );
    
    var letterarray = buildLetterArray(50,50);
  var productarray = buildPRODUCTArray();

  //lets check for sku added handle
  var productHandleNoDash = productHandle.split("-").join("");

  var productHandleNoDashWSKU = productHandleNoDash + "::" + SKU.toUpperCase();

  if (productarray[productHandleNoDashWSKU] != null){
    var productArrayFound = productarray[productHandleNoDashWSKU];
  } else {
    var productArrayFound = productarray[productHandleNoDash];
  }

    //lets pull the productarray
    
    
    // if the productarray has a multiplier for qty, update ATCqty
    // but dont update the qty if the product has come in with full params (an edit).  then leave it as it is without the multiplier
    // basically you pass 1 sheet set.. do 2 monograms.. but if you pass 2 monograms from a sheet set edit, dont do 4 monograms.
    // going to use the SKU as a flag (its not passed on initial add, only on edit)
    
    if (productArrayFound != null){
      var MonoMultiplier = productArrayFound[1];
      
      // var paramSKU = getUrlParam('_SKU',"");

      var tempATCqty = ATCqty*MonoMultiplier;
      var ATCqty = tempATCqty.toString();

      
    }

    if (productHandle != "Empty"){
            
      $('.addNewMono').show();
      if (ATCqty > 1) { 
        
        //update the title and button
        $('.full-page-title').html('CREATE YOUR MONOGRAMS');
        $('.megaATC').html('Add Monograms to Cart');
          
        
        $('.monoMulti').show();  
        for (i = 0; i < ATCqty-1; i++) { 
          var temp = $( ".addNewMono:first" ).clone(true);
          var tempid = temp.children('.monogram-form').attr('id');
          temp.children('.monogram-form').attr('id', tempid+i);
          temp.find('.mono-button').children('a').attr('data-form-id',tempid+i);
 
          temp.find('.item-counter').html(i+2);
          temp.appendTo( ".addNewMonoHolder" );
        }
        /* on init, for all except the first, hide the non dummies */
    $( ".addNewMono:not(:first)" ).find('.monoFontHolder').hide();
        $( ".addNewMono:not(:first)" ).find('.monoTextHolder').hide();
        $( ".addNewMono:not(:first)" ).find('.monoColorHolder').hide();
        /* remove the add-all-items buttons */
        $( ".mono-add-all-items:not(:first)" ).remove();
        
        copytoDummies();
        
        /* set the qty counter for all of the entires to the total quty */
    $('.item-add-qty').html(ATCqty);
        
        /* for all except the first, hide the AYS */
        $( ".addNewMono:not(:first)" ).find('.monoAYSUREHolder').hide();
        $( ".addNewMono:not(:first)" ).find('.monoBigImg-holder').hide();
        
      } /* end make multies */

      
      /* for the first, remove dummy stuff */
      $( ".addNewMono:first" ).find('.monoDummyHolder').remove();
      $( ".addNewMono:first" ).find('.MonoQty').val(ATCqty);
     
      //pull and set info from the passed handle
      Shopify.getProduct(productHandle, function(MonoProduct){

        var monoTitle = MonoProduct.title;
        $('.monoNEW-title').html(monoTitle);
        for (count = 0; count <MonoProduct.variants.length; count++) {
          if (variantID == MonoProduct.variants[count].id){
            /*we are trying to add a valid product.
            show the add block.  Fill with variant product, info
            */
            $(".MonoproductName").attr('value', MonoProduct.variants[count].name );
            $(".MonoSKU").attr('value', MonoProduct.variants[count].sku );

          }

        }
      }); // Shopify.getProduct
      
      //now lets go back to the productarray and upate the other info (note, offset, imgurl)
      
      if (productArrayFound != null){
        var MonoOffset = productArrayFound[0];
        var MonoNote = productArrayFound[2];
        
        var MonoScale = productArrayFound[3].substring(
            productArrayFound[3].lastIndexOf("e") + 1, 
            productArrayFound[3].lastIndexOf("x")
        );
        
        var MonoImgUrl = productArrayFound[4];
        
       $('.monoBigOverlay-holder').attr('ProdmonoScale',MonoScale);
       
        $('.monoBigOverlay-holder').css('top',MonoOffset);
        $('.monoBigOverlay-holder').attr('origTop',MonoOffset);
        
        if (MonoNote.replace(/\s/g, '').length > 0) {
          $('.monoProd-note').html(MonoNote);
          $('.monoProd-note').show();
        }

        if (MonoImgUrl != undefined) {
           $('.monoNEW-image').html("<img class='monoImgSmall' alt='Image of product being monogrammed' src=\""+MonoImgUrl+"\" />");
          
        } else {
 
          Shopify.getProduct(productHandle, function(MonoProduct){
            
            //first set the preview as the default image    
            var monoImgSRC = MonoProduct.images[0];

            //next if it is combopage, choose the last image.
            if (MonoProduct.type == "ComboPage") {
              var monoImgSRC = MonoProduct.images[MonoProduct.images.length-1];
            }
			//next look for stack labeled images.
            for (i = 0; i < MonoProduct.images.length; i++) {

              if (MonoProduct.images[i].toLowerCase().indexOf('stack') > -1){
                var monoImgSRC = MonoProduct.images[i];
              } 
            }
            
            //next choose the variant image if there is one
            debugger;
            var variantImgLoc = -1;
            for (i=0; i< MonoProduct.variants.length; i++) {
              if (MonoProduct.variants[i]["id"] == variantID) {
                if (MonoProduct.variants[0]["featured_image"] != undefined){
                   var variantImgLoc = MonoProduct.variants[0]["featured_image"]["position"]-1;
                   var monoImgSRC = MonoProduct.images[variantImgLoc];
                }
              }
            }

            

          $('.monoNEW-image').html("<img alt='Image of product being monogrammed' class='monoImgSmall' src="+monoImgSRC+" />");
         
        }); // Shopify.getProduct
          
        }
        
        
      } else {
       
        //pull and set info from the passed handle for the image only
        Shopify.getProduct(productHandle, function(MonoProduct){
          var monoImgSRC = MonoProduct.images[0];
   
          for (i = 0; i < MonoProduct.images.length; i++) {
        
              if (MonoProduct.images[i].toLowerCase().indexOf('stack') > -1){
                var monoImgSRC = MonoProduct.images[i];
              } 
              
             
            }
          $('.monoNEW-image').html("<img class='monoImgSmall' alt='Image of product being monogrammed' src="+monoImgSRC+" />");
         
        }); // Shopify.getProduct
 
      }
    letterarray = initParams(letterarray);
      
      
      
    }//if prodhandle empty
    
    $('.all-items-checkbox:checkbox').change(function() {
        // use the :checked selector to find any that are checked
        
        if ($(':checkbox:checked').length > 0) {
      hideAllEdits(".addNewMono");
          $('.MonoQty').val(ATCqty);
        } else {
      showAllEdits(".addNewMono");
            $('.MonoQty').val('1');
        }
     });
    
    
     $( ".initials:first" ).on('input', function() {
        copytoDummies();
    });

    $(".initials").on('input',function(){

        $(this).parent().siblings('.monoTitle').removeClass("titleError");
      var letterarray = updateImgMonogramAttr($(this).closest('.monoSelectors'));
        updateImgMonogramText($(this).closest('.monoSelectors'),letterarray);
    });
    
    $(function() {
          $(".initials").focusout(function() {
              // Uppercase-ize contents
              this.value = this.value.toLocaleUpperCase();
          });
      });
    
    $(function(){
      $('.AYSNO').click(function(){
        if ($(this).is(':checked'))
        {
          var tempholder = $(this).closest('.addNewMono');
          tempholder.find('.monoBottom').hide();
          //decactive atc button
          tempholder.find('.mono-button').children('a').attr('href','#tempOFF');
          // if first one, uncheck all-items-checkbox
          
          var tempfind = tempholder.find('.all-items-checkbox');
          if (tempfind.length) {
            tempfind.prop('checked', false); 
            showAllEdits(".addNewMono");
            $('.MonoQty').val('1');
          }
          // if all the no buttons are checked, change the text in the megaATC button.
          if ($('.AYSNO:checked').length == $('.AYSNO').length) {    
            $('.megaATC').html('CONTINUE WITHOUT MONOGRAMS');
            $('.atc-mono-title').hide();
          } else if ($('.AYSNO:checked').length == 1) {
            $('.megaATC').html('ADD MONOGRAM TO CART');
            $('.atc-mono-title').show();
          } else {
            $('.megaATC').html('ADD MONOGRAMS TO CART');
            $('.atc-mono-title').show();
          }
        }
      });
    });
    $(function(){
      $('.AYSYES').click(function(){
        if ($(this).is(':checked'))
        {
          var tempholder = $(this).closest('.addNewMono');
          tempholder.find('.monoBottom').show();
          //decactive atc button

          tempholder.find('.mono-button').children('a').attr('href','#addtocart');
          // if first one, uncheck all-items-checkbox
          
          var tempfind = tempholder.find('.all-items-checkbox');
          if (tempfind.length) {
            tempfind.prop('checked', false); 
            showAllEdits(".addNewMono");
            $('.MonoQty').val('1');
          }
          
          // if yes is clicked, change the megaATC button.
          if ($('.AYSYES:checked').length == 1) {
            $('.megaATC').html('ADD MONOGRAM TO CART');
            $('.atc-mono-title').show();
          } else {
            $('.megaATC').html('ADD MONOGRAMS TO CART');
            $('.atc-mono-title').show();
          }
          
        }
      });
    });
    

     $('.mono-font-slider-entry').on('click', function(event){
       
        var $this = $(this);
       /* select the hidden drop down select used for atc */
        $this.closest('.monoSlider').siblings('select').val($this.attr('name'));
       
       /* remove errors */
       $this.closest('.monoSlider').siblings('.monoTitle').removeClass('titleError');
       
       /* add the black border */
       $this.parent().addClass('sliderSelected');
       $this.closest('.monoSlider').find('.mono-slider-div').not($this.parent()).removeClass('sliderSelected');
       
       copytoDummies();
       
       /* add the name of the selcted item to the title bar*/
       var temphandle = $this.attr('value');
       $this.closest('.monoSlider').siblings('.monoTitle').find('.monoTitleSub').html(":&nbsp;&nbsp;&nbsp;"+$this.attr('name'));
       
       
       /* if we choose the font bar */
       if ($this.closest('.monoSlider').parent().hasClass('monoFontHolder')){
         
         updateFontDescription($this.closest('.monoSlider'), temphandle);
         
       }
       
        /* update the monogram on the big image */
       letterarray = updateImgMonogramAttr($this.closest('.monoSelectors'));

       updateImgMonogramText($this.closest('.monoSelectors'),letterarray);

       
      });
      
  
    
    
    $('.megaATC').click(function() {
    if ($('.AYSYES:checked').length > 0) {
        if($('.all-items-checkbox').prop('checked') == true){

          //need to check if minlength is met.  otherwise error enter text.
          var minflag = false;
          if($( ".addNewMono:first" ).find('.initials').val().length >= $( ".addNewMono:first" ).find('.initials').attr('minlength')){
           var minflag = true; 
          }

          if( minflag && $( ".addNewMono:first" ).find('.mono-font').val() != "" && $( ".addNewMono:first" ).find('.mono-color').val() != ""){
            $(".metaATCSpinner").show();
            $( ".addNewMono:first" ).find('.mono-button').children('a').click();
            $.fancybox.open({
              src  : '#addtocart',
              type : 'inline',
              width: 'auto',
              height: 'auto',
              beforeShow: function() {
                $(".metaATCSpinner").hide();
                 var shift = parseInt($('.compensate-for-scrollbar').css('margin-right'), 10)*-0.5;
                 $('.float-panel').css('left',shift);
                    // Code to execute after the pop up shows
              },
              afterClose: function() {
                 $('.float-panel').css('left','0');
                    // Code to execute after the pop up shows
                window.location.href = readCookie('tlpMurl');
              }
            });
          } else {

            if( minflag == false ){
              $( ".addNewMono:first" ).find('.initials').parent().siblings('.monoTitle').addClass("titleError");
            }
            if( $( ".addNewMono:first" ).find('.mono-font').val() == "" ){
              $( ".addNewMono:first" ).find('.mono-font').siblings('.monoTitle').addClass("titleError");
            }

            if( $( ".addNewMono:first" ).find('.mono-color').val() == "" ){
              $( ".addNewMono:first" ).find('.mono-color').siblings('.monoTitle').addClass("titleError");
            }
            $('html, body').animate({
              scrollTop: ($('.titleError').first().offset().top - 100)
          },500); 
           //alert('please choose a font and color.  Input text for the monogram.'); 
          }
        } else {

          //need to check if minlength is met.  otherwise error enter text.
          var empty = $('.addNewMonoHolder').find('.initials').filter(function() {

            return (($(this).val().length < $(this).attr('minlength') || $(this).closest('.addNewMono').find('.mono-font').val() === "" || $(this).closest('.addNewMono').find('.mono-color').val() === "") && $(this).closest('.addNewMono').find('.AYSYES').is(':checked') === true );
          });

          if(empty.length) {

            // empty is a list of .initials for items that are missing entires.

            empty.each(function( index ) {

              var currentANM = $(this).closest('.addNewMono');

              //check and flag font
              if(currentANM.find('.mono-font').val() == "" ){
                  currentANM.find('.mono-font').siblings('.monoTitle').addClass("titleError");
              }

              //check and flag initals

              if( $(this).val().length < $(this).attr('minlength') ){
                  $(this).parent().siblings('.monoTitle').addClass("titleError");
              }


              //check and flag color
              if(currentANM.find('.mono-color').val() == "" ){
                  currentANM.find('.mono-color').siblings('.monoTitle').addClass("titleError");
              }


            });
            $('html, body').animate({
              scrollTop: ($('.titleError').first().offset().top - 100)
          },500); 

            //alert('please choose a font and color.  Input text for the monogram.'); 
          } else {
            $(".metaATCSpinner").show();
            //run the multi atc function.  In ajaxify.shop.js
            multiATC();
      
              $( document ).ajaxStop(function() {
                  $.fancybox.open({
                  src  : '#addtocart',
                  type : 'inline',
                  width: 'auto',
                  height: 'auto',
                  modal: true,
                  beforeShow: function() {
                    $(".metaATCSpinner").hide();
                     var shift = parseInt($('.compensate-for-scrollbar').css('margin-right'), 10)*-0.5;
                     $('.float-panel').css('left',shift);
                        // Code to execute after the pop up shows
                  },
                  afterClose: function() {
                     $('.float-panel').css('left','0');
                        // Code to execute after the pop up shows
                      window.location.href = readCookie('tlpMurl');
                  }
                });
              });
      

          }
        }
        
      } else {
       //popup and continue shopping.
        $.fancybox.open({
          src  : '#addtocart',
          type : 'inline',
          width: 'auto',
          height: 'auto',
          modal: true,
          beforeShow: function() {
          
            var shift = parseInt($('.compensate-for-scrollbar').css('margin-right'), 10)*-0.5;
            $('.float-panel').css('left',shift);
            // Code to execute after the pop up shows
          },
          afterClose: function() {
            $('.float-panel').css('left','0');
            // Code to execute after the pop up shows
            window.location.href = readCookie('tlpMurl');
          }
        });
        
      } // end if AYSYES checked
      
        
    
    }); // end click on megaATC
    
    
    
    //Code to move the monogram overlay offset on resize to smaller screens (less than 400px)
    var resizeId;
    $(window).resize(function() {
        clearTimeout(resizeId);
        resizeId = setTimeout(doneResizing, 500);
    });

    function doneResizing(){
        
      // need to send each monoSelector.

      $('.monoSelectors').each(function( index ) {
        var curImgWidth = parseInt($('.monoBigImg-holder').find('.monoBigImg:visible:first').css('width'));
      updateImgMonogramScale(curImgWidth/400, $(this));
   });
        
    }
    
     
  
    $('.owl-font').owlCarousel({
        loop:false,
        margin:10,
        nav: true,
        navText :  ["<img alt='left' src='//cdn.shopify.com/s/files/1/0093/5372/files/scroll-left-monogram.png?4040573893903939055'>","<img alt='right' src='//cdn.shopify.com/s/files/1/0093/5372/files/scroll-right-monogram.png?4040573893903939055'>"],
        autoplay:false,
        autoplayTimeout:4000,
        autoplayHoverPause:true,
        responsiveClass:true,
        autoplaySpeed:1500,
        dots: false,
        mouseDrag : false,
        touchDrag : true,
        responsive:{
          0:{
            items:3,
            slideBy: 1,
          },
          600:{
            items:5,
            slideBy: 1,
          },
          1000:{
            items:7,
            slideBy: 1,
          }
        }
      });
  });
  
 
</script>


<div class="content-margins">
  <div class="content-wrap">
    <div class="inner-content-wrap">       
    <div class="full-page-title" role="heading" aria-level="1">
      CREATE YOUR MONOGRAM
      </div>
      <div class="full-page-subtitle">
        Orders for monogrammed items cannot be cancelled or returned.
      </div>
      <div class="addNewMonoHolder">
        <div class="addNewMono seedMono" style="display:none;">
          <!-- need to add error code later -->


          <form action="/cart/add" method="post" id="{{product.id}}" class="monogram-form" style="" autocomplete="off">
            <div class="mono-holder" >
              <div class="monoProd-title monoNEW-title"></div>
              <div class="monoProd-note"></div>
              <div class="monoMulti mono-item-count">Item <span class="item-counter">1</span> of <span class="item-add-qty">1</span></div>
              <div class="monoIMGAYS-holder">
                <div class="monoProd-image monoNEW-image"></div>
                <div class="monoAYSUREHolder">
                  <fieldset role="radiogroup" aria-label="Do you want to Monogram this item?">
                      <div class="AYSRadio-holder">
                        <label class="AYcontainer AYSYES">Yes, monogram this item. I understand that personalized items cannot be cancelled or returned.
                          <input aria-label="button to say yes, monogram this item" type="radio" class="AYSYES" name="AYS" autocomplete="off" checked="checked">
                <span class="AYcheckmark"></span>
                          
                        </label>
                       
                      </div>

                      <div class="AYSRadio-holder">
                        
                        <label class="AYcontainer AYSNO">No, do not monogram this item.
                          <input aria-label="button to say no, do not monogram this item" type="radio" class="AYSNO" name="AYS" autocomplete="off" >
                <span class="AYcheckmark"></span>
                          
                        </label>
                       
                      </div>


                  </fieldset>
                </div>
              </div>
              <div class="monoBottom">
                <div class="monoSelectors">
                  <div class="monoDummyHolder">
                    <div class="monoTitle">Your Selections</div>
                    <div class=" monoMulti monoFontDummy monoDummy">
                      <div class="monoFontDummyValueIMG monoDummyLeft">&nbsp;</div>
                      <div class="monoDummyRight">Font:  <span class="monoFontDummyValue"></span></div>
                    </div>
                    <div class=" monoMulti  monoDummy">
                      <div class="monoTextDummyValueIMG monoDummyLeft">&nbsp;</div>
                      <div class="monoMulti monoTextDummy monoDummyRight">TEXT:  <span class="monoFontTextValue"></span></div>
                    </div>
                    <div class="monoMulti monoColorDummy monoDummy">
                      <div class="monoColorDummyValueIMG monoDummyLeft">&nbsp;</div>
                      <div class="monoDummyRight">Color:  <span class="monoColorDummyValue"></span></div>
                    </div>
                  </div>
                  <div class="monoFontHolder">
                    <div class="monoTitle">Select Your Font<span class="monoTitleSub"></span></div>
                    <div class="monoSlider" >
                      <div class="owl-carousel owl-theme owl-font">
                          {% assign monocoll = collections.monogram-fonts %}
                          {% assign monoFontNameString = '' %}
                          {% assign temp = '' %}
                          {% for monofontprod in monocoll.products %}
                              {% assign monofonttitleArray = monofontprod.title | split: '-' %}
                              {% assign monofontname = monofonttitleArray[1] | strip %}
                              {% assign monofonthandle = monofonttitleArray[1] | handleize %}
                              {% capture monoFontNameString %}
                                  {{temp}}|{{monofontname}}
                              {% endcapture %}
                              {% assign temp = monoFontNameString %}

                               <div class="mono-slider-div">
                                <a class="mono-font-slider-entry" name="{{monofontname}}" value="{{monofonthandle}}" ><img alt="{{monofontname}} selector" src="{{ monofontprod.images[0] | product_img_url: '200x200', crop: 'bottom' }}" style="width:100%;" /></a>
                              </div>

                          {% endfor %}
                          {% assign monoFontNameArray = monoFontNameString | split: '|' %}

                      </div>
                    </div><!--monoFontSlider -->
                    <select aria-label="Monogram Font Selector" name="properties[Font]" class="mono-font monoNOTDUMMY" >
                      {% for font in monoFontNameArray %}
                          <option value="{{font| strip }}">{{font | strip}}</option>
                      {% endfor %}

                    </select>
                    
                    <div class="monoFontDescription" style="display:inline-block;">
                      
                          {% for monofontprod in monocoll.products %}
                              {% assign monofonttitleArray = monofontprod.title | split: '-' %}
                              {% assign monofontname = monofonttitleArray[1] | strip %}
                              {% assign monofonthandle = monofonttitleArray[1] | handleize %}
                              
                            {% assign charcountARRAY = monofontprod.images[0].alt | split: ":" %}
                            {% assign charcount = charcountARRAY[0] %}
                            {% assign charadjust = charcountARRAY[1] %}
                            {% assign WideChars = charcountARRAY[2] %}
                            {% assign NarrowChars = charcountARRAY[3] %}
                      
                               <div class="mono-font-data-holder {{monofonthandle}}" handle="{{monofonthandle}}" charadjust="{{charadjust}}" widchars="{{WideChars}}" narrowchars="{{NarrowChars}}" charcount="{{charcount}}" style="display:none; margin-bottom:10px;">
                                 
                                 <div class="monoFontDescrip-LEFT" style="width:100px; float:left; margin: auto 10px; text-align: center;">
                                    <img alt="Font selector button for {{monofontname}}" class="mono-font-thumb" src="{{ monofontprod.images[0] | img_url: '200x200', crop: 'bottom' }}" style="width:100%;" />
                                    <a href="javascript:;" data-fancybox data-src="#hiddenpopup{{monofonthandle}}" data-caption="{{monofontname}}">
                                        View all letters
                                    </a>
                                   <div id="hiddenpopup{{monofonthandle}}" style="padding:20px; display:none;">
                                     <img alt="Image of all the letters in {{monofontname}}" class="mono-font-popupimg" src="{{ monofontprod.images[1] | img_url: '600x600', crop: 'bottom' }}" style="width:100%;" />
                                   </div>
                                   {% for monoletterset in monofontprod.images %}

                                      {% if forloop.index0 == 0 %}
                                      <img alt="Image of all the letters in {{monofontname}}" class="mono-font-sprite1 mono-font-one"  src="{{ monoletterset | img_url: '600x' }}" style="width:100%; display:none;" />
                                    {% elsif forloop.index0 == 1 %}
                                        {% assign imgalt = monoletterset.alt %}
                                        {% assign imgaltTemp = imgalt | split: ":" %}
                                        {% assign letterwidth = imgaltTemp[0] | remove: 'px' %}
                                        {% assign letterheight = imgaltTemp[1] | remove: 'px' %}
                                        <img alt="Image of all the letters in {{monofontname}}" class="mono-font-sprite1 mono-font-base" letterwidth="{{letterwidth}}" letterheight="{{letterheight}}" src="{{ monoletterset | img_url: '600x' }}" style="width:100%; display:none;" />
                                      {% else %}
                                        {% assign imgalt = monoletterset.alt %}
                                        {% assign imgaltTemp = imgalt | split: ":" %}
                                        {% if imgaltTemp.size > 1 %}
                                          <img alt="Image of all the letters in {{monofontname}}" class="mono-font-sprite1 mono{{ imgaltTemp[0] | replace: " ", "" | downcase }} mono{{imgaltTemp[1] | replace: " ", "" | downcase }}" position="{{ imgaltTemp[1] | replace: " ", "" | downcase }}" color="{{ imgaltTemp[0] | replace: " ", "" | downcase }}" src="{{ monoletterset | img_url: '600x' }}" style="width:100%; display:none;" />

                                        {% else %}
                                          <img alt="Image of all the letters in {{monofontname}}" class="mono-font-sprite1 mono{{ monoletterset.alt | replace: " ", "" | downcase }}" color="{{ monoletterset.alt | replace: " ", "" | downcase  }}" src="{{ monoletterset | img_url: '600x' }}" style="width:100%; display:none;" />
                                        {% endif %}
                                      {% endif %}
                                   {% endfor %}
                                    
                                 </div>
                                 <div class="monoFontDescrip-RIGHT" style="width:calc(100% - 120px); float:left; ">
                  <div class="mono-font-descrip-text" >
                                     {{monofontprod.description }}
                                   </div>

                                 </div>
                              </div>

                          {% endfor %}
                    </div>
                    
                  </div> <!--monoFontHolder-->
                  <div class="monoTextHolder">
                    <div class="monoTitle">Enter Text</div>
                    <div class="monoNOTDUMMY" style="display:inline-block;width:100%;">

                    <input aria-label="input for your monogram initials" required class="required initials" widchars="" narrowchars="" charadjust="12px" onkeypress="if (event.keyCode == 13) { document.activeElement.blur(); return false;}" type="text" name="properties[Initials]" maxlength="3" minlength="1" style="float:left;text-transform:uppercase;">
                      <div class="text-input-label" style="float:left; margin: 30px 0;">
                      <span class="text-input-label-num">1,2, or 3</span> character(s)
                      
                    </div>
                    </div>
                    
                   
                  </div>
                  <div class="monoColorHolder">
                    <div class="monoTitle">Select Your Color<span class="monoTitleSub"></span></div>
                    <div class="monoSlider" >
                      <div class="owl-carousel owl-theme owl-font">
                        
                        
                          {% assign monoColorCol = collections.monogram-colors %}
                          {% for monoColorProd in monoColorCol.products %}
                            {% assign monoColortitleArray = monoColorProd.title | split: '-' %}
                              {% assign monoColorName = monoColortitleArray[1] | strip | downcase %}
                              {% assign monoColorHandle = monoColortitleArray[1] | handleize %}
                              {% assign monoColorImg = monoColorProd.images[0] %}
                              <div class="mono-slider-div">
                                <a class="mono-font-slider-entry" name="{{monoColorName }}" value="{{monoColorName}}" ><img alt="{{monoColorName}} selector" src="{{ monoColorImg | img_url: '200x200', crop: 'bottom' }}" style="width:100%;" /></a>
                              </div>
                          {% endfor %}
                        
                          

                      </div>
                    </div><!--monoFontSlider -->
                    <select aria-label="Monogram Color Selector" name="properties[Color]" class="mono-color monoNOTDUMMY" >
                      {% for monoColorProd in monoColorCol.products %}
                            {% assign monoColortitleArray = monoColorProd.title | split: '-' %}
                              {% assign monoColorName = monoColortitleArray[1] | strip | downcase %}

                            <option value="{{monoColorName}}">{{monoColorName}}</option>
                      {% endfor %}
                      
                   

                    </select>
                    
                  </div> <!--monoColorHolder-->
                  
                  <input class="MonoproductName" type="hidden" name="properties[Product]" value="">
                  <input class="MonoQty" type="hidden" name="quantity" value="1">
                  <input class="MonoSKU" type="hidden" name="properties[_SKU]" value="">
                  <input class="MonoProductHandle" type="hidden" name="properties[_handle]" value="">
                  <input class="MonoVariantID" type="hidden" name="properties[_variantID]" value="">

                  {% for variant in product.variants %}
                  <input type="hidden" name="id" value="{{ variant.id }}">
                  {% endfor %}

                  <div class="monoMulti mono-add-all-items">
                    <div class="mono-add-all-items-decription" style="margin-bottom:15px;">
                      Would you like to use the monogram you created on the other items below?
                    </div>
                    
                    <label class="AllItemscontainer">Apply to all Items
                      <input aria-label="checkbox to apply to all the items" type="checkbox" class="all-items-checkbox" type="checkbox" autocomplete="off" value="all_items" checked="checked">
                      <span class="AllItemscheckmark"></span>
                    </label>
                         
                  </div>
                  <div class="mono-button"><a aria-hidden="true" aria-label="Hidden Individual monogram add to cart button" type="submit" href="#addtocart" class="{{product.id}}atcbutton btn addtocartTrigger" title="" style="padding-top:7px; padding-bottom:6px;" data-form-id="{{ product.id }}">Add to cart</a></div>
                </div> <!-- monoselectors -->
        <div class="monoBigImg-holder">
                    <div class="monoBigOverlay-holder"  origTop="30%" origbgimgwidth="" origLetterWidth="" origLetterHeight="" scale="1" ProdmonoScale="1">
                      <div class="monoBigOverlay-inner-holder" >
                        <div class="mono0 monoletter" letterx="" lettery="" defaultLeft="0" ></div>
                        <div class="mono1 monoletter" letterx="" lettery=""  defaultLeft="0"></div>

                        <div class="mono2 monoletter" letterx="" lettery=""  defaultLeft="0"></div>
                      </div>
                    </div>
                  <div class="monoBigImg monoNEW-image"></div>
                  <div class="disclaimer">Final monogram may vary from preview.</div>
                </div>
              </div><!-- monoBottom -->
            </div>


          </form>
        </div> <!-- addNewMono -->
        
      </div><!-- addNewMonoHolder -->
      <div class="megaADDBTNHolder">
        <div class="megaATCHolder" ><a aria-label="Add monograms to cart button"  role="button" class="btn megaATC" title="" >Add Monogram to Cart</a></div><div class="metaATCSpinner" style="display:none;" ><img alt="spinner" style="width:50px;padding-top: 5px;" src="{{ 'Spinner-1.5s-50px.svg' | asset_url }}" /></div>
        </div>
     
    </div><!-- inner content wrap -->

  </div>
</div>


<!--Hidden Div for add to cart popup--> 
<div id="addtocart" class="hide">
  <div class="addtocart_btn_wrapper">
    <div class="atc-mono-title">Monogram(s) Added to Cart</div>
      <a href="#" title="" class=" btn atc_pop_continue btn swatchATC" >Continue Shopping</a>
      <a href="/cart" title="" class="btn atc_pop_view" style="">Go to cart</a> 
  </div>
</div>

<!-- cookie creation for "continue shopping" button -->
<script type="text/javascript">
createCookie('tlpurl',document.URL,1);
$('.swatchATC').click(function(){

  window.location.href = readCookie('tlpMurl');


});
</script>