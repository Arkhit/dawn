{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: calc({{ section.settings.padding_top }}px * 0.75);
    padding-bottom: calc({{ section.settings.padding_bottom }}px  * 0.75);
  }
  .scrolling-links .link {
      font-size: 1.6rem;
      font-weight: 500;
  }

  .scrolling-ellipse-wrapper {
    position: relative;
  }

  .scrolling-links {
    max-width: fit-content;
    margin: auto;
  }

  .content-text--wrapper {
    display: flex;
    --grid-mobile-vertical-spacing: 30px;
  }
  
  .content-text--inner {
    max-width: 64rem;
    width: 100%;
  }

  .content-align--middle-left {
    align-items: center;
    justify-content: flex-start;
  }

  .content-small-text--left {
    text-align: left;
  }

  .content-small-text--center {
    text-align: center;
  }

  .content-small-text--right {
    text-align: right;
  }

  @media screen and (min-width: 750px) {
    .layout--image_first .content-text--image {
      order: 1;
    }
    .layout--image_first .content-text--inner {
      order: 2;
    }

    .content-text--left {
      text-align: left;
    }

    .content-text--center {
      text-align: center;
    }

    .content-text--right {
      text-align: right;
    }

    .content-text--left .title-divider {
      margin-left: 0;
    }

    .content-align--middle-start {
      justify-content: flex-start;
    }
    .content-align--middle-center {
      justify-content: center;
    }
    .content-align--middle-end {
      justify-content: flex-end;
    }

    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top | times: 2 }}px;
      padding-bottom: {{ section.settings.padding_bottom | times: 2 }}px;
    }
  }

  @media (max-width: 749px) {
    .content__text {
      padding: 0 1rem;
    }
  }
{%- endstyle -%}
<div class="color-{{ section.settings.color_scheme }} gradient">
  <div class="scrolling-ellipse-wrapper" id="{{ section.settings.section_id }}">
    {% if section.settings.ellipse_top %}
      <div class="ellipse-element ellipse-top">
        <div
          class="media media--transparent media--adapt"
            style="padding-bottom: {{ 1 | divided_by: section.settings.ellipse_top.aspect_ratio | times: 100 }}%;"
        >
          {%- liquid
            assign number_of_columns = 1
            assign number_of_columns_mobile = 1
            assign grid_space_desktop = number_of_columns | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
            assign grid_space_tablet = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
            assign grid_space_mobile = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | divided_by: 2 | plus: 30 | append: 'px'
            assign image_width = 1
          -%}
          {% capture sizes %}
            (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width }}px - {{ grid_space_desktop }}) * {{ image_width }} /  {{ number_of_columns }}),
            (min-width: 990px) calc((100vw - {{ grid_space_desktop }}) * {{ image_width }} / {{ number_of_columns }}),
            (min-width: 750px) calc((100vw - {{ grid_space_tablet }}) * {{ image_width }} / {{ number_of_columns_mobile }}),
            calc((100vw - {{ grid_space_mobile }}) * {{ image_width }} / {{ number_of_columns_mobile }})
          {% endcapture %}
          {{
            section.settings.ellipse_top
            | image_url: width: 600
            | image_tag:
              loading: 'lazy',
              widths: '50, 75, 100, 150, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3200',
              sizes: sizes
          }}
        </div>
      </div>
    {% endif %}
    {% if section.settings.ellipse_bottom %}
      <div class="ellipse-element ellipse-bottom">
        <div
          class="media media--transparent media--adapt"
            style="padding-bottom: {{ 1 | divided_by: section.settings.ellipse_bottom.aspect_ratio | times: 100 }}%;"
        >
          {%- liquid
            assign number_of_columns = 1
            assign number_of_columns_mobile = 1
            assign grid_space_desktop = number_of_columns | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
            assign grid_space_tablet = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
            assign grid_space_mobile = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | divided_by: 2 | plus: 30 | append: 'px'
            assign image_width = 1
          -%}
          {% capture sizes %}
            (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width }}px - {{ grid_space_desktop }}) * {{ image_width }} /  {{ number_of_columns }}),
            (min-width: 990px) calc((100vw - {{ grid_space_desktop }}) * {{ image_width }} / {{ number_of_columns }}),
            (min-width: 750px) calc((100vw - {{ grid_space_tablet }}) * {{ image_width }} / {{ number_of_columns_mobile }}),
            calc((100vw - {{ grid_space_mobile }}) * {{ image_width }} / {{ number_of_columns_mobile }})
          {% endcapture %}
          {{
            section.settings.ellipse_bottom
            | image_url: width: 600
            | image_tag:
              loading: 'lazy',
              widths: '50, 75, 100, 150, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3200',
              sizes: sizes
          }}
        </div>
      </div>
    {% endif %}

    <div class="section-{{ section.id }}-padding">
      <div class="page-width">
        <div class="content-text--wrapper layout--{{ section.settings.layout }} content-align--{{ section.settings.desktop_content_position }} {% if section.settings.image_column %} grid grid--1-col grid--2-col-tablet{% endif %}">
          <div class="
            {% if section.settings.image_column %}
              grid__item
            {% endif %}
            content-text--inner content-text--{{ section.settings.desktop_content_alignment }} content-small-text--{{ section.settings.mobile_content_alignment }}">
            {%- unless section.settings.heading == blank -%}
              <div class="title-wrapper title-wrapper--no-top-margin{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                <h2 class="title inline-richtext {{ section.settings.heading_size }}">{{ section.settings.heading }}</h2>
                <div class="title-divider"></div>
              </div>
            {%- endunless -%}

            {% if section.settings.text != blank %}
              <div class="content__text rte {{ section.settings.text_style }}">
                {{ section.settings.text }}
              </div>
            {% endif %}
            
            <div class="scrolling-links">
              <ul class="list-unstyled">
                {% for block in section.blocks %}
                  {% if block.settings.link %}
                    <li>
                      <a href="{{ block.settings.link }}" class="link center link--text full-unstyled-link">{{ block.settings.link_text }}</a>
                    </li>
                  {% endif %}
                {% endfor %}
              </ul>
            </div>
          </div>
          {% if section.settings.image_column %}
            <div class="
              {% if section.settings.image_column %}
                grid__item
              {% endif %}
              content-text--image">
              <div
                class="media media--transparent media--adapt"
                style="padding-bottom: {{ 1 | divided_by: section.settings.image_column.aspect_ratio | times: 100 }}%;"
              >
                  {%- liquid
                  assign number_of_columns = 1
                  assign number_of_columns_mobile = 1
                  assign grid_space_desktop = number_of_columns | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
                  assign grid_space_tablet = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
                  assign grid_space_mobile = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | divided_by: 2 | plus: 30 | append: 'px'
                  assign image_width = 1
                  -%}
                  {% capture sizes %}
                  (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width }}px - {{ grid_space_desktop }}) * {{ image_width }} /  {{ number_of_columns }}),
                  (min-width: 990px) calc((100vw - {{ grid_space_desktop }}) * {{ image_width }} / {{ number_of_columns }}),
                  (min-width: 750px) calc((100vw - {{ grid_space_tablet }}) * {{ image_width }} / {{ number_of_columns_mobile }}),
                  calc((100vw - {{ grid_space_mobile }}) * {{ image_width }} / {{ number_of_columns_mobile }})
                  {% endcapture %}
                  {{
                    section.settings.image_column
                  | image_url: width: 3200
                  | image_tag:
                      loading: 'lazy',
                      widths: '50, 75, 100, 150, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3200',
                      sizes: sizes
                  }}
              </div>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>

{% schema %}
{
  "name": "K Text Sections",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "default": "Video",
      "label": "t:sections.video.settings.heading.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "t:sections.image-banner.blocks.text.settings.text.label"
    },
    {
      "type": "select",
      "id": "text_style",
      "options": [
        {
          "value": "body",
          "label": "t:sections.image-banner.blocks.text.settings.text_style.options__1.label"
        },
        {
          "value": "subtitle",
          "label": "t:sections.image-banner.blocks.text.settings.text_style.options__2.label"
        },
        {
          "value": "caption-with-letter-spacing",
          "label": "t:sections.image-banner.blocks.text.settings.text_style.options__3.label"
        }
      ],
      "default": "body",
      "label": "t:sections.image-banner.blocks.text.settings.text_style.label"
    },
    {
      "type": "image_picker",
      "id": "ellipse_top",
      "label": "Ellipse Top"
    },
    {
      "type": "image_picker",
      "id": "ellipse_bottom",
      "label": "Ellipse Bottom"
    },
    {
      "type": "image_picker",
      "id": "image_column",
      "label": "Image column"
    },
    {
      "type": "select",
      "id": "layout",
      "options": [
        {
          "value": "image_first",
          "label": "t:sections.image-with-text.settings.layout.options__1.label"
        },
        {
          "value": "text_first",
          "label": "t:sections.image-with-text.settings.layout.options__2.label"
        }
      ],
      "default": "image_first",
      "label": "t:sections.image-with-text.settings.layout.label",
      "info": "t:sections.image-with-text.settings.layout.info"
    },
    {
      "type": "select",
      "id": "desktop_content_position",
      "options": [
        {
          "value": "middle-left",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__4.label"
        },
        {
          "value": "middle-center",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__5.label"
        },
        {
          "value": "middle-right",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__6.label"
        }
      ],
      "default": "middle-center",
      "label": "t:sections.image-banner.settings.desktop_content_position.label"
    },
    {
      "type": "select",
      "id": "desktop_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.image-banner.settings.desktop_content_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.image-banner.settings.desktop_content_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.image-banner.settings.desktop_content_alignment.options__3.label"
        }
      ],
      "default": "center",
      "label": "t:sections.image-banner.settings.desktop_content_alignment.label"
    },
    {
      "type": "select",
      "id": "mobile_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.image-banner.settings.mobile_content_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.image-banner.settings.mobile_content_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.image-banner.settings.mobile_content_alignment.options__3.label"
        }
      ],
      "default": "center",
      "label": "t:sections.image-banner.settings.mobile_content_alignment.label"
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.all.colors.accent_1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.all.colors.accent_2.label"
        },
        {
          "value": "background-1",
          "label": "t:sections.all.colors.background_1.label"
        },
        {
          "value": "background-2",
          "label": "t:sections.all.colors.background_2.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.colors.inverse.label"
        }
      ],
      "default": "background-1",
      "label": "t:sections.all.colors.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 52
    },
    {
      "type": "text",
      "id": "section_id",
      "label": "Section ID",
      "info": "optional"
    }
  ],
  "blocks": [
    {
      "type": "link",
      "name": "Link",
      "settings": [
        {
          "type": "url",
          "id": "link",
          "label": "Link",
          "info": "Use section id"
        },
        {
          "type": "text",
          "id": "link_text",
          "label": "Link text"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "K Text Sections"
    }
  ]
}
{% endschema %}