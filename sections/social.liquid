{{ 'social.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign enable_section = false

  if template == 'index' and section.settings.enable_home
    assign enable_section = true
  endif

  if template contains 'product' and section.settings.enable_product
    assign enable_section = true
  endif

  if template contains 'collection' and section.settings.enable_collection
    assign enable_section = true
  endif
-%}

{%- if enable_section -%}
  {%- assign grid_item_width = 'grid-product--medium' -%}

  <div class="index-section social-section">
    <div
      id="SocialReviews-{{ section.id }}"
      data-section-id="{{ section.id }}"
      data-section-type="featured-collection"
      data-scrollable="true"
      data-product-sliders-mobile="false"
      data-paginate="false">
      {%- if section.settings.title != blank -%}
        <div class="page-width">
          <header class="social-section-header" data-aos>
            <h2 class="section-header__title appear-delay">
              {{ section.settings.title }}
            </h2>
            {%- if section.settings.description != blank -%}
              <div class="rte section-header__description section-header__description--large appear-delay-1">
                {{ section.settings.description }}
              </div>
            {%- endif -%}
          </header>
        </div>
      {%- endif -%}

      <div class="overflow-scroll-wrap">
        <button
          type="button"
          class="btn btn--tertiary overflow-scroller__arrow overflow-scroller__arrow--left overflow-scroller--disable-left small--hide"
          aria-hidden="true"
          aria-label="{{ 'general.pagination.previous' | t }}"
          data-arrow>
          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-chevron-left" viewBox="0 0 284.49 498.98"><path d="M249.49 0a35 35 0 0 1 24.75 59.75L84.49 249.49l189.75 189.74a35.002 35.002 0 1 1-49.5 49.5L10.25 274.24a35 35 0 0 1 0-49.5L224.74 10.25A34.89 34.89 0 0 1 249.49 0z"/></svg>
        </button>
        <button
          type="button"
          class="btn btn--tertiary overflow-scroller__arrow overflow-scroller__arrow--right small--hide"
          aria-hidden="true"
          aria-label="{{ 'general.pagination.next' | t }}"
          data-arrow>
          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-chevron-right" viewBox="0 0 284.49 498.98"><path d="M35 498.98a35 35 0 0 1-24.75-59.75l189.74-189.74L10.25 59.75a35.002 35.002 0 0 1 49.5-49.5l214.49 214.49a35 35 0 0 1 0 49.5L59.75 488.73A34.89 34.89 0 0 1 35 498.98z"/></svg>
        </button>

        {%- assign count = 10 -%}
        <div
          class="overflow-scroller overflow-scroller--smaller"
          data-pagination-wrapper>
          <div
            class="grid grid--uniform social-section__grid"
            data-aos="overflow__animation">

            {%- if section.blocks.size == 0 -%}
              {%- for i in (1..8) -%}
                <div class="grid__item {{ grid_item_width }}">
                  {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}

                  <div class="social-section__wrapper">
                    <div class="image-wrap">{{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}</div>
                    <div class="social-section__meta">
                      <div class="social-section__likes">
                        {{ i }} likes
                      </div>
                      <div class="social-section__caption">
                        <strong>@youraccount</strong>
                        Showcase images from your social accounts
                      </div>
                    </div>
                  </div>
                </div>
              {%- endfor -%}
            {%- endif -%}

            {% comment %}
              When on product page, check if any social blocks match the current product
            {% endcomment %}
            {%- assign social_product_blocks = '' -%}
            {%- assign social_blocks = '' -%}

            {%- for block in section.blocks -%}
              {%- assign prod = all_products[block.settings.product] -%}

              {%- if
                template contains 'product' and
                block.settings.product != blank and
                block.settings.product == product.handle -%}

                {%- capture social_product_blocks -%}
                  {{ social_product_blocks }}

                  {%- render 'social-post',
                    block: block,
                    grid_item_width: grid_item_width,
                    image: block.settings.image,
                    link: block.settings.link,
                    prod: prod,
                    caption: block.settings.caption,
                    account: block.settings.account,
                    likes: block.settings.likes -%}
                {%- endcapture -%}

              {%- else -%}
                {%- capture social_blocks -%}
                  {{ social_blocks }}

                  {%- render 'social-post',
                    block: block,
                    grid_item_width: grid_item_width,
                    image: block.settings.image,
                    link: block.settings.link,
                    prod: prod,
                    caption: block.settings.caption,
                    account: block.settings.account,
                    likes: block.settings.likes -%}
                {%- endcapture -%}
              {%- endif -%}

            {%- endfor -%}

            {%- if social_product_blocks != blank -%}
              {{ social_product_blocks }}
            {%- endif -%}
            {%- if social_blocks != blank -%}
              {{ social_blocks }}
            {%- endif -%}
          </div>
        </div>
      </div>
    </div>
  </div>
{% endif %}

<script>

  FeaturedCollection.prototype = Object.assign({}, FeaturedCollection.prototype, {
      init: function() {
        new theme.HoverProductGrid(this.container);
  
        if (!this.state.scrollable) {
          return;
        }
  
        this.sizing = this.getScrollWidths();
  
        window.on('resize' + this.namespace, theme.utils.debounce(200, this.handleResize.bind(this)));
  
        this.toggleScrollListener(this.state.scrollable);
        this.arrowListeners(this.state.scrollable);
  
        this.state.isInit = true;
      },
  
      reInit: function() {
        new theme.HoverProductGrid(this.container);
  
        if (this.state.scrollable) {
          this.sizing = this.getScrollWidths();
          this.toggleScrollListener(this.state.scrollable);
        }
  
        theme.reinitProductGridItem();
      },
  
      loadingState: function(loading) {
        this.state.loading = loading;
        this.container.classList.toggle(classes.loading, loading);
      },
  
      getScrollWidths: function() {
        var container = this.scrollWrap.offsetWidth;
        var scroller = this.scrollWrap.scrollWidth;
        var item = this.scrollWrap.querySelector('.grid__item');
        var itemWidth = item.offsetWidth;
  
        // First time this runs there is a 200px CSS animation that JS doesn't
        // take into account, so manually subtract from the scroller width
        if (!this.state.isInit) {
          scroller = scroller - 200;
        }
  
        if (scroller <= container) {
          this.disableArrow(null, true);
        }
  
        return {
          scroller: scroller,
          scrollSize: scroller - container,
          itemWidth: itemWidth
        };
      },
  
      handleResize: function() {
        if (this.state.scrollable) {
          this.sizing = this.getScrollWidths();
        }
        this.toggleScrollListener(this.state.scrollable);
        this.arrowListeners(this.state.scrollable);
      },
  
      toggleScrollListener: function(enable) {
        if (enable) {
          if (this.state.scrollerEnabled) { return; }
          this.scrollWrap.on('scroll' + this.namespace, theme.utils.throttle(250, this.scrollCheck.bind(this)));
          this.state.scrollerEnabled = true;
        } else {
          this.scrollWrap.off('scroll' + this.namespace);
          this.state.scrollerEnabled = false;
        }
      },
  
      scrollCheck: function(evt) {
        if (this.state.loading) {
          this.toggleScrollListener(false);
          return;
        }
  
        // If a value is 0, we need to recalculate starting points
        if (this.sizing.scrollSize === 0) {
          this.sizing = this.getScrollWidths();
        }
  
        var scrollLeft = evt.currentTarget.scrollLeft ? evt.currentTarget.scrollLeft : 0;
        var percent = Math.floor(scrollLeft / this.sizing.scrollSize * 100);
        var fromEnd = this.sizing.scrollSize - scrollLeft;
  
        if (this.options.paginate) {
          if (!this.state.loadedAllProducts && percent > 50) {
            this.getNewProducts();
          }
        }
  
        if (!percent) {
          percent = 0;
        }
  
        this.disableArrow(percent);
      },
  
      arrowListeners: function(enable) {
        this.scrollArrows.forEach(arrow => {
          arrow.off('click' + this.namespace);
          if (enable) {
            arrow.classList.remove('hide');
            arrow.on('click' + this.namespace, this.arrowScroll.bind(this));
          } else {
            arrow.classList.add('hide');
          }
        });
      },
  
      arrowScroll: function(evt) {
        var direction = evt.currentTarget.classList.contains(classes.arrowLeft) ? 'left' : 'right';
        var iteration = theme.config.bpSmall ? 1 : 2;
  
        if (evt.type === 'mouseenter') {
          this.state.scrollInterval = setInterval(function(){
            var currentPos = this.scrollWrap.scrollLeft;
            var newPos = direction === 'left' ? (currentPos - iteration) : (currentPos + iteration);
            this.scrollWrap.scrollLeft = newPos;
          }.bind(this), this.state.scrollSpeed);
        } else if (evt.type === 'mouseleave') {
          clearInterval(this.state.scrollInterval);
        } else if (evt.type === 'click') {
          clearInterval(this.state.scrollInterval);
          var currentPos = this.scrollWrap.scrollLeft;
          var scrollAmount = this.sizing.itemWidth * this.settings.itemsToScroll;
          var newPos = direction === 'left' ? (currentPos - scrollAmount) : (currentPos + scrollAmount);
  
          this.scrollWrap.scroll({
            left: newPos,
            behavior: 'smooth'
          });
        }
  
        if (newPos <= 0) {
          this.disableArrow(newPos);
        }
      },
  
      disableArrow: function(pos, all) {
        this.scrollArrows.forEach(arrow => {
          arrow.classList.remove(classes.disableScrollRight);
          arrow.classList.remove(classes.disableScrollLeft);
  
          if (all) {
            arrow.classList.add(classes.disableScrollRight);
            arrow.classList.add(classes.disableScrollLeft);
            return;
          }
  
          // Max left scroll
          if (pos <= 10) {
            arrow.classList.add(classes.disableScrollLeft);
            return;
          }
  
          // Max right scroll
          if (pos >= 96) {
            arrow.classList.add(classes.disableScrollRight);
            return;
          }
        });
      },
  
      getNewProducts: function() {
        this.loadingState(true);
        var newPage = this.settings.page + 1;
        var itemWidth = this.settings.gridItemWidth;
  
        // No more pages, disable features
        if (newPage > this.settings.pageCount) {
          this.loadingState(false);
          this.state.loadedAllProducts = true;
          return;
        }
  
        var newUrl = this.settings.url + '?page=' + (newPage);
  
        fetch(newUrl).then(function(response) {
          return response.text();
        }).then(function(html) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(html, 'text/html');
          var newProducts = doc.querySelectorAll(selectors.collectionProductContainer + ' .grid-product');
          var fragment = document.createDocumentFragment();
  
          newProducts.forEach(prod => {
            prod.classList.add(itemWidth);
            fragment.appendChild(prod);
          });
  
          this.container.querySelector(selectors.productContainer).appendChild(fragment);
  
          this.ajaxSuccess();
        }.bind(this));
      },
  
      ajaxSuccess: function() {
        this.loadingState(false);
        this.settings.page = this.settings.page + 1;
        this.reInit();
      },
  
      forceReload: function() {
        this.onUnload();
        this.init();
      },
  
      // Only runs in the editor while a user is activating.
      // Rearranges quick shop modals to fix potentially broken layout
      onLoad: function() {
        theme.QuickShopScreens.reInit(this.container);
      },
  
      onUnload: function() {
        window.off(this.namespace);
        window.dispatchEvent(new Event('resize'));
        this.scrollWrap.off(this.namespace);
        theme.QuickShopScreens.unload(this.container);
      }
  
    });

</script>

{% schema %}
  {
    "name": "Social proof",
    "max_blocks": 20,
    "settings": [
      {
        "type": "checkbox",
        "id": "enable_home",
        "label": "Enable on home page",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "enable_product",
        "label": "Enable on product pages",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "enable_collection",
        "label": "Enable on collection pages"
      },
      {
        "type": "text",
        "id": "title",
        "label": "Heading",
        "default": "On social"
      },
      {
        "type": "richtext",
        "id": "description",
        "label": "Description",
        "default": "<p>Send us yours <a href=\"https://instagram.com/youraccount/\">@youraccount</a></p>"
      }
    ],
    "blocks": [
      {
        "type": "post",
        "name": "Social post",
        "settings": [
          {
            "type": "image_picker",
            "id": "image",
            "label": "Image"
          },
          {
            "type": "text",
            "id": "link",
            "label": "Link"
          },
          {
            "type": "product",
            "id": "product",
            "label": "Product"
          },

          {
            "type": "header",
            "content": "Post details"
          },
          {
            "type": "text",
            "id": "account",
            "label": "Account name"
          },
          {
            "type": "text",
            "id": "caption",
            "label": "Caption"
          },
          {
            "type": "text",
            "id": "likes",
            "label": "Number of likes"
          }
        ]
      }
    ],
	"presets": [
		{
			"name": "Social Proof"
		}
	]
  }
{% endschema %}

{% if template contains 'product' %}
<!-- YOTPO REVIEWS WIDGET | location: sections > social.liquid -->
<div class="yotpo yotpo-main-widget"
	data-product-id="{{ product.id }}"
	data-name="{{ product.title | escape }}"
	data-url="{{ shop.url }}{{ product.url }}"
	data-image-url="{{ product.featured_image | product_img_url: 'large' |replace: '?', '%3F' | replace: '&','%26'}}"
	data-price="{{ variant.price | money_without_currency }}"
	data-currency="{{ shop.currency }}"
	data-description="{{ product.description | escape }}">
</div>
<!-- END | YOTPO REVIEWS WIDGET  -->
{% endif %}