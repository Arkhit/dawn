
{% assign initial_filter_tags = settings_filters | downcase | split: ',' %}

{% assign filter_name = filter_title %}
<details
  class="sidebar-block {% if first_block %}sidebar-block--first{% endif %}" id="{{ filter_class }}"
  data-sidebar-block 
  {% unless section.settings.toggle %}
    open
  {% endunless %}
>
  <summary>
    <div class= "Heading_optizen_filter">
      <h3 class="sidebar-block__heading Opizen_headings heading__optizen"id= "{{filter_name|downcase|handleize}}">
      {{ filter_name }} {% render 'icon-caret' %}
      <span class="right icon-down-arrow sidebar-block-toggle-icon"></span>
    </h3>
    </div>
  </summary>
  <div class="sidebar__collection-filter">
    <ul class="toggle_list li_teks_togle optizen_filter_bar">
      <div class="filter-all-tags color-filter--{{ block.settings.enable_filter_swatches }}">
        {% assign tagExists = false %}
        {% for tag in initial_filter_tags %}
          {% assign formatted_tag = tag |strip %}
            {% if collection_tags contains formatted_tag %}
              {% assign tagExists = true %}
              <li class="tags_optizen">
                <a>
                  <label data-option-filter style="display: inline-block;">
                    <input
                      type="checkbox"
                      value="{{- tag | replace: filter_name, '' | handleize -}}"
                      name="{{tag | handleize }}"
                      class="checkbox-trigger-link" 
                    >
                   {% if current_tags contains tag  %}
                     {{ tag | link_to_remove_tag: tag }}
                    {% else %}
                     
                     {{ tag | link_to_add_tag: tag }}
                    {% endif %}
              
                  </label>
                </a>
              </li>
            {% endif %}
        {% endfor %}
      
      </div>
    </ul>
  </div>
 </details>

 {% if tagExists == false %}
<script>
    document.querySelector('#{{filter_name|downcase|handleize}}').style.display = 'none';
  
document.addEventListener('DOMContentLoaded', function() {
  var checkboxes = document.querySelectorAll('.checkbox-trigger-link');

  checkboxes.forEach(function(checkbox) {
    checkbox.addEventListener('change', function() {
      updateURLFromCheckboxes();
    });

    // Check the checkbox if it was selected before
    var savedCheckboxValues = JSON.parse(sessionStorage.getItem('selectedCheckboxes')) || [];
    if (savedCheckboxValues.includes(checkbox.value)) {
      checkbox.checked = true;
    }
  });

  // Clear sessionStorage when on the default URL
  var defaultUrl = 'https://goodwatch.com/collections/all';
  if (window.location.href === defaultUrl) {
    sessionStorage.removeItem('selectedCheckboxes');
    checkboxes.forEach(function(checkbox) {
      checkbox.checked = false; // Uncheck all checkboxes
    });
  } else {
    // Update checkboxes based on the URL
    updateCheckboxesFromURL();
  }

  function updateCheckboxesFromURL() {
    var url = window.location.href;
    var parts = url.split('/');
    var lastPart = parts[parts.length - 1];
    var values = lastPart.split('+');

    checkboxes.forEach(function(checkbox) {
      checkbox.checked = values.includes(checkbox.value);
    });
  }

  function updateURLFromCheckboxes() {
    // Get all checked checkboxes
    var checkedCheckboxes = document.querySelectorAll('.checkbox-trigger-link:checked');

    // Get an array of values from the checked checkboxes
    var selectedValues = Array.from(checkedCheckboxes).map(function(checkedCheckbox) {
      return checkedCheckbox.value;
    });

    // Construct the URL with all selected values
    var redirectUrl = 'https://goodwatch.com/collections/all/' + selectedValues.join('+');

    // Update the URL and trigger the redirect
    window.location.href = redirectUrl;
  }
});

  </script>
{% endif %}

