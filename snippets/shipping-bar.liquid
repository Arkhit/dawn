<style>
  .shipping-bar {
    margin-bottom: 2rem;
  }
  .shipping-bar p {
    margin: 0;
  }
  .shipping-bar__bar {
    position: relative;
    background-color: {{ settings.progress_bar_bg }};
    height: 1rem;
    transition: all 1000ms linear;
  }
  .shipping-bar__progress {
    top: 0;
    left: 0;
    min-width: 0;
    max-width: 100%;
    height: 100%;
    display: block;
    background-color: {{ settings.progress_bar_color }};
    transition: all 1000ms linear;
  }
</style>

<div class="shipping-bar">
  <p class="shipping-bar__remain">{{ settings.shipping_bar_text | replace: '$', total_remaining }}</p>
  <p class="shipping-bar__success">{{ settings.shipping_bar_success }}</p>
  <div class="shipping-bar__bar">
    <div class="shipping-bar__progress"><span></span></div>
  </div>
</div>

<script>
  function calculateProgress(currentVal, targetVal) {
    const progressBar = document.querySelectorAll('.shipping-bar__progress');
    const progressOuter = document.querySelectorAll('.shipping-bar__remain');
    const successMsg = document.querySelectorAll('.shipping-bar__success');
    const result = Math.round((100 * currentVal) / targetVal);

    progressBar.forEach(function (el) {
      el.setAttribute('style', 'width: '.concat(result, '%'));
    });

    let remainingAmount = (targetVal - currentVal) / 100;
    let formattedAmount = new Intl.NumberFormat('de-DE', { minimumFractionDigits: 2 }).format(remainingAmount);

    if (remainingAmount <= 0) {
        progressOuter.forEach(function (el) {
            el.style.display = 'none';
        });
        successMsg.forEach(function (el) {
            el.style.display = 'block';
        });
    } else {
        successMsg.forEach(function (el) {
            el.style.display = 'none';
        });
        progressOuter.forEach(function (el) {
            el.style.display = 'block';
            el.innerHTML = '{{ settings.shipping_bar_text }}'.replace('$', formattedAmount + ' ' + '{{ cart.currency.symbol }}');
        });
    }
  }

  function cartDrawerUpdate() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(data => {
        calculateProgress(data.total_price, {{ settings.threshold_amount | times: 100 }});
      })
      .catch(error => console.error('Error updating shipping bar:', error));
  }
  cartDrawerUpdate();
</script>
