{% comment %}
    Renders color swatch options for product variants
  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.
{% endcomment %}

{%- assign swatch_type = settings.swatchType -%}
{%- assign swatch_style = settings.swatchStyle -%}
{%- assign swatch_size = settings.swatchSize -%}
{%- assign swatch_colors = settings.swatchColors | newline_to_br | split: '<br />' -%}

<style>
  .color-swatch-wrapper {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  .color-swatch {
    width: {{ swatch_size }}px;
    height: {{ swatch_size }}px;
    cursor: pointer;
    border: 1px solid #d6d6d6;
    position: relative;
    background-size: cover;
    background-position: center;
  }
  .color-swatch.round {
    border-radius: 50%;
  }
  .color-swatch.square-round-corners {
    border-radius: 5px;
  }
  .color-swatch.portrait {
    height: {{ swatch_size | times: 1.5 }}px;
  }
  .color-swatch.selected:after {
    content: '';
    position: absolute;
    top: -3px;
    left: -3px;
    right: -3px;
    bottom: -3px;
    border: 2px solid #000;
    border-radius: inherit;
  }
  .color-swatch input[type="radio"] {
    display: none;
  }
</style>

<div class="color-swatch-wrapper" data-option-index="{{ option.position }}">
  {%- for value in option.values -%}
    {%- liquid
      assign color_swatch_id = section.id | append: '-' | append: option.position | append: '-' | append: forloop.index0
      assign swatch_style = ''

      if swatch_type == 'color'
        for color in swatch_colors
          assign color_data = color | split: ':'
          if color_data.first == value
            assign swatch_style = 'background-color:' | append: color_data.last
            break
          endif
        endfor
      elsif swatch_type == 'variantImage'
        for variant in product.variants
          if variant.options contains value
            assign swatch_style = 'background-image: url(' | append: variant.image | image_url: width: swatch_size | append: ')'
            break
          endif
        endfor
      endif
    -%}
    <label
      for="{{ color_swatch_id }}"
      class="color-swatch {{ swatch_style }} {% if option.selected_value == value %}selected{% endif %}"
      style="{{ swatch_style }}"
    >
      <input
        type="radio"
        id="{{ color_swatch_id }}"
        name="{{ option.name | handle }}"
        value="{{ value | escape }}"
        {% if option.selected_value == value %}
          checked
        {% endif %}
        data-index="option{{ option.position }}"
      >
      <span class="visually-hidden">{{ value }}</span>
    </label>
  {%- endfor -%}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var swatchWrapper = document.querySelector('.color-swatch-wrapper[data-option-index="{{ option.position }}"]');
    var swatches = swatchWrapper.querySelectorAll('.color-swatch');
    var selectedDisplay = document.querySelector('#selected-{{ option.name | handle }}');

    swatches.forEach(function(swatch) {
      swatch.addEventListener('click', function(event) {
        event.preventDefault();
        var input = this.querySelector('input[type="radio"]');
        var value = input.value;

        // Update selected swatch
        swatches.forEach(function(s) { s.classList.remove('selected'); });
        this.classList.add('selected');

        // Update hidden select
        var selectElement = document.querySelector('select[name="{{ option.name | handle }}"]');
        if (selectElement) {
          selectElement.value = value;
          selectElement.dispatchEvent(new Event('change', { bubbles: true }));
        }

        // Update display
        if (selectedDisplay) {
          selectedDisplay.textContent = " " + value;
        }

        // Trigger variant change event
        var variantChangeEvent = new CustomEvent('variant:changed', {
          bubbles: true,
          detail: {
            optionPosition: {{ option.position }},
            value: value
          }
        });
        this.dispatchEvent(variantChangeEvent);
      });
    });
  });
</script>
