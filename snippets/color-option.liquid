{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.

  Usage:
  {% render 'color-option',
    product: product,
    option: option,
    block: block
  %}
{% endcomment %}

{%- liquid
  assign swatchType = settings.swatchType
  assign swatchStyle = settings.swatchStyle
  assign swatchSize = settings.swatchSize
  assign swatchColors = settings.swatchColors | newline_to_br | split: '<br />'
-%}

{{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

<style>
  .color-swatch {
    display: inline-block;
    width: {{ swatchSize }}px;
    height: {{ swatchSize }}px;
    margin-right: 10px;
    cursor: pointer;
    background-size: cover;
    background-position: center;
    border: 1px solid #ddd;
    {% if swatchStyle == 'round' %}
      border-radius: 50%;
    {% elsif swatchStyle == 'square-round-corners' %}
      border-radius: 5px;
    {% endif %}
  }

  .color-swatch.selected {
    border: 2px solid #000;
  }

  {% if swatchStyle == 'portrait' %}
    .color-swatch {
      height: calc({{ swatchSize }}px * 1.5);
    }
  {% endif %}
</style>

<variant-radios
  id="variant-radios-{{ section.id }}"
  class="no-js-hidden"
  data-section="{{ section.id }}"
  data-url="{{ product.url }}"
  {% if update_url == false %}
    data-update-url="false"
  {% endif %}
  {{ block.shopify_attributes }}
>
  {%- for option in product.options_with_values -%}
    <fieldset class="js product-form__input">
      <legend class="form__label">
        {{ option.name }}: <span id="selected-{{ option.name | handleize }}">{{ option.selected_value }}</span>
      </legend>
      <div class="radio-wrapper color-wrapper js product-form__input">
        {%- for value in option.values -%}
          <input
            type="radio"
            id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
            name="{{ option.name }}"
            value="{{ value | escape }}"
            form="{{ product_form_id }}"
            {% if option.selected_value == value %}
              checked
            {% endif %}
            class="visually-hidden"
          >

          {% assign swatch_image = null %}
          {% for variant in product.variants %}
            {% if variant.options[option.position | minus: 1] == value %}
              {% if variant.image %}
                {% assign swatch_image = variant.image %}
                {% break %}
              {% endif %}
            {% endif %}
          {% endfor %}

          <label
            for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
            class="color-swatch {% if option.selected_value == value %}selected{% endif %}"
            {% if swatch_image %}
              style="background-image: url('{{ swatch_image | image_url: width: swatchSize }}');"
            {% else %}
              style="
                {%- for colorData in swatchColors -%}
                  {%- assign colorDataArr = colorData | split: ':' -%}
                  {%- assign ruleName = colorDataArr[0] | strip -%}
                  {%- if value == ruleName -%}
                    {%- assign colorCode = colorDataArr[1] | strip -%}
                    background-color: {{ colorCode }};
                  {%- endif -%}
                {%- endfor -%}
              "
            {% endif %}
            data-option-value="{{ value | escape }}"
          >
            <span class="visually-hidden">{{ value }}</span>
          </label>
        {%- endfor -%}
      </div>
    </fieldset>
  {%- endfor -%}

  <script type="application/json">
    {{ product.variants | json }}
  </script>
</variant-radios>

{% if product.has_only_default_variant %}
  <script type="application/json">
    {{ product.variants | json }}
  </script>
{% endif %}

<script>
  class VariantRadios extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('change', this.onVariantChange);
    }

    onVariantChange() {
      this.updateOptions();
      this.updateMasterId();
      this.toggleAddButton(true, '', false);
      this.updatePickupAvailability();
      this.removeErrorMessage();

      if (!this.currentVariant) {
        this.toggleAddButton(true, '', true);
        this.setUnavailable();
      } else {
        this.updateMedia();
        this.updateURL();
        this.updateVariantInput();
        this.renderProductInfo();
        this.updateShareUrl();
      }
    }

    updateOptions() {
      this.options = Array.from(this.querySelectorAll('input[type="radio"]:checked'), (input) => input.value);
    }

    updateMasterId() {
      this.currentVariant = this.getVariantData().find((variant) => {
        return !variant.options.map((option, index) => {
          return this.options[index] === option;
        }).includes(false);
      });
    }

    updateMedia() {
      if (!this.currentVariant) return;
      if (!this.currentVariant.featured_media) return;

      const mediaGalleries = document.querySelectorAll(`[id^="MediaGallery-${this.dataset.section}"]`);
      mediaGalleries.forEach(mediaGallery => mediaGallery.setActiveMedia(`${this.dataset.section}-${this.currentVariant.featured_media.id}`, true));

      const modalContent = document.querySelector(`#ProductModal-${this.dataset.section} .product-media-modal__content`);
      if (modalContent) {
        const newMediaModal = modalContent.querySelector( `[data-media-id="${this.currentVariant.featured_media.id}"]`);
        modalContent.prepend(newMediaModal);
      }
    }

    updateURL() {
      if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
      window.history.replaceState({ }, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
    }

    updateShareUrl() {
      const shareButton = document.getElementById(`Share-${this.dataset.section}`);
      if (!shareButton || !shareButton.updateUrl) return;
      shareButton.updateUrl(`${window.shopUrl}${this.dataset.url}?variant=${this.currentVariant.id}`);
    }

    updateVariantInput() {
      const productForms = document.querySelectorAll(`#product-form-${this.dataset.section}, #product-form-installment-${this.dataset.section}`);
      productForms.forEach((productForm) => {
        const input = productForm.querySelector('input[name="id"]');
        input.value = this.currentVariant.id;
        input.dispatchEvent(new Event('change', { bubbles: true }));
      });
    }

    updatePickupAvailability() {
      const pickUpAvailability = document.querySelector('pickup-availability');
      if (!pickUpAvailability) return;

      if (this.currentVariant && this.currentVariant.available) {
        pickUpAvailability.fetchAvailability(this.currentVariant.id);
      } else {
        pickUpAvailability.removeAttribute('available');
        pickUpAvailability.innerHTML = '';
      }
    }

    removeErrorMessage() {
      const section = this.closest('section');
      if (!section) return;

      const productForm = section.querySelector('product-form');
      if (productForm) productForm.handleErrorMessage();
    }

    renderProductInfo() {
      fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
        .then((response) => response.text())
        .then((responseText) => {
          const id = `price-${this.dataset.section}`;
          const html = new DOMParser().parseFromString(responseText, 'text/html')
          const destination = document.getElementById(id);
          const source = html.getElementById(id);

          if (source && destination) destination.innerHTML = source.innerHTML;

          const price = document.getElementById(`price-${this.dataset.section}`);

          if (price) price.classList.remove('visibility-hidden');
          this.toggleAddButton(!this.currentVariant.available, window.variantStrings.soldOut);
        });
    }

    toggleAddButton(disable = true, text, modifyClass = true) {
      const productForm = document.getElementById(`product-form-${this.dataset.section}`);
      if (!productForm) return;
      const addButton = productForm.querySelector('[name="add"]');
      const addButtonText = productForm.querySelector('[name="add"] > span');
      if (!addButton) return;

      if (disable) {
        addButton.setAttribute('disabled', 'disabled');
        if (text) addButtonText.textContent = text;
      } else {
        addButton.removeAttribute('disabled');
        addButtonText.textContent = window.variantStrings.addToCart;
      }

      if (!modifyClass) return;
    }

    setUnavailable() {
      const button = document.getElementById(`product-form-${this.dataset.section}`);
      const addButton = button.querySelector('[name="add"]');
      const addButtonText = button.querySelector('[name="add"] > span');
      const price = document.getElementById(`price-${this.dataset.section}`);
      if (!addButton) return;
      addButtonText.textContent = window.variantStrings.unavailable;
      if (price) price.classList.add('visibility-hidden');
    }

    getVariantData() {
      this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
      return this.variantData;
    }
  }

  customElements.define('variant-radios', VariantRadios);

  document.addEventListener('DOMContentLoaded', function() {
    const swatches = document.querySelectorAll('.color-swatch');
    swatches.forEach(swatch => {
      swatch.addEventListener('click', function() {
        const radio = document.getElementById(this.getAttribute('for'));
        if (radio) {
          radio.checked = true;
          radio.dispatchEvent(new Event('change', { bubbles: true }));
        }
        
        // Update selected value display
        const optionName = radio.name;
        const selectedValueElement = document.getElementById(`selected-${optionName.toLowerCase().replace(/\s+/g, '-')}`);
        if (selectedValueElement) {
          selectedValueElement.textContent = this.getAttribute('data-option-value');
        }

        // Update swatch selection visually
        swatches.forEach(s => s.classList.remove('selected'));
        this.classList.add('selected');
      });
    });
  });
</script>
